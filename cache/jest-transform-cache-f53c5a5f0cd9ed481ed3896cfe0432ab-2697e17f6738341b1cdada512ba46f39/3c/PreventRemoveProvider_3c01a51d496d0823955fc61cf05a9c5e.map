{"version":3,"mappings":"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","names":["transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","React","useState","parentId","Map","setPreventedRoutesMap","navigation","useContext","NavigationHelpersContext","route","NavigationRouteContext","preventRemoveContextValue","PreventRemoveContext","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","_prevPrevented$get","_prevPrevented$get2","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo","_PreventRemoveContext","Provider"],"sources":["PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]}