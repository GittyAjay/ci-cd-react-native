d471436a3790ada2347288b20fbde203
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrivateValueStore = void 0;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var PrivateValueStore = (0, _createClass2.default)(function PrivateValueStore() {
  (0, _classCallCheck2.default)(this, PrivateValueStore);

  _defineProperty(this, '', void 0);
});
exports.PrivateValueStore = PrivateValueStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQStKYUEsaUIsOEJBQTZDO0VBQUE7O0VBQUFDLHNCQVc5QyxFQVg4QztBQUFBLEMiLCJuYW1lcyI6WyJQcml2YXRlVmFsdWVTdG9yZSIsIl9kZWZpbmVQcm9wZXJ0eSJdLCJzb3VyY2VzIjpbInR5cGVzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIERlZmF1bHRSb3V0ZXJPcHRpb25zLFxuICBJbml0aWFsU3RhdGUsXG4gIE5hdmlnYXRpb25BY3Rpb24sXG4gIE5hdmlnYXRpb25TdGF0ZSxcbiAgUGFyYW1MaXN0QmFzZSxcbiAgUGFydGlhbFN0YXRlLFxuICBSb3V0ZSxcbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vcm91dGVycyc7XG5pbXBvcnQgdHlwZSAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuICBuYW1lc3BhY2UgUmVhY3ROYXZpZ2F0aW9uIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWludGVyZmFjZVxuICAgIGludGVyZmFjZSBSb290UGFyYW1MaXN0IHt9XG4gIH1cbn1cblxudHlwZSBLZXlvZjxUIGV4dGVuZHMge30+ID0gRXh0cmFjdDxrZXlvZiBULCBzdHJpbmc+O1xuXG5leHBvcnQgdHlwZSBEZWZhdWx0TmF2aWdhdG9yT3B0aW9uczxcbiAgUGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZSxcbiAgU3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUsXG4gIFNjcmVlbk9wdGlvbnMgZXh0ZW5kcyB7fSxcbiAgRXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcEJhc2Vcbj4gPSBEZWZhdWx0Um91dGVyT3B0aW9uczxLZXlvZjxQYXJhbUxpc3Q+PiAmIHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIElEIGZvciB0aGUgbmF2aWdhdG9yLiBDYW4gYmUgdXNlZCB3aXRoIGBuYXZpZ2F0aW9uLmdldFBhcmVudChpZClgIHRvIHJlZmVyIHRvIGEgcGFyZW50LlxuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDaGlsZHJlbiBSZWFjdCBFbGVtZW50cyB0byBleHRyYWN0IHRoZSByb3V0ZSBjb25maWd1cmF0aW9uIGZyb20uXG4gICAqIE9ubHkgYFNjcmVlbmAsIGBHcm91cGAgYW5kIGBSZWFjdC5GcmFnbWVudGAgYXJlIHN1cHBvcnRlZCBhcyBjaGlsZHJlbi5cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lcnMgZm9yIGFsbCB0aGUgc2NyZWVucyBpbiB0aGUgbmF2aWdhdG9yLlxuICAgKi9cbiAgc2NyZWVuTGlzdGVuZXJzPzpcbiAgICB8IFNjcmVlbkxpc3RlbmVyczxTdGF0ZSwgRXZlbnRNYXA+XG4gICAgfCAoKHByb3BzOiB7XG4gICAgICAgIHJvdXRlOiBSb3V0ZVByb3A8UGFyYW1MaXN0PjtcbiAgICAgICAgbmF2aWdhdGlvbjogYW55O1xuICAgICAgfSkgPT4gU2NyZWVuTGlzdGVuZXJzPFN0YXRlLCBFdmVudE1hcD4pO1xuICAvKipcbiAgICogRGVmYXVsdCBvcHRpb25zIGZvciBhbGwgc2NyZWVucyB1bmRlciB0aGlzIG5hdmlnYXRvci5cbiAgICovXG4gIHNjcmVlbk9wdGlvbnM/OlxuICAgIHwgU2NyZWVuT3B0aW9uc1xuICAgIHwgKChwcm9wczoge1xuICAgICAgICByb3V0ZTogUm91dGVQcm9wPFBhcmFtTGlzdD47XG4gICAgICAgIG5hdmlnYXRpb246IGFueTtcbiAgICAgIH0pID0+IFNjcmVlbk9wdGlvbnMpO1xuICAvKipcbiAgICogRGVmYXVsdCBvcHRpb25zIHNwZWNpZmllZCBieSB0aGUgbmF2aWdhdG9yLlxuICAgKiBJdCByZWNlaXZlcyB0aGUgY3VzdG9tIG9wdGlvbnMgaW4gdGhlIGFyZ3VtZW50cyBpZiBhIGZ1bmN0aW9uIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIGRlZmF1bHRTY3JlZW5PcHRpb25zPzpcbiAgICB8IFNjcmVlbk9wdGlvbnNcbiAgICB8ICgocHJvcHM6IHtcbiAgICAgICAgcm91dGU6IFJvdXRlUHJvcDxQYXJhbUxpc3Q+O1xuICAgICAgICBuYXZpZ2F0aW9uOiBhbnk7XG4gICAgICAgIG9wdGlvbnM6IFNjcmVlbk9wdGlvbnM7XG4gICAgICB9KSA9PiBTY3JlZW5PcHRpb25zKTtcbn07XG5cbmV4cG9ydCB0eXBlIEV2ZW50TWFwQmFzZSA9IFJlY29yZDxcbiAgc3RyaW5nLFxuICB7IGRhdGE/OiBhbnk7IGNhblByZXZlbnREZWZhdWx0PzogYm9vbGVhbiB9XG4+O1xuXG5leHBvcnQgdHlwZSBFdmVudE1hcENvcmU8U3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGU+ID0ge1xuICBmb2N1czogeyBkYXRhOiB1bmRlZmluZWQgfTtcbiAgYmx1cjogeyBkYXRhOiB1bmRlZmluZWQgfTtcbiAgc3RhdGU6IHsgZGF0YTogeyBzdGF0ZTogU3RhdGUgfSB9O1xuICBiZWZvcmVSZW1vdmU6IHsgZGF0YTogeyBhY3Rpb246IE5hdmlnYXRpb25BY3Rpb24gfTsgY2FuUHJldmVudERlZmF1bHQ6IHRydWUgfTtcbn07XG5cbmV4cG9ydCB0eXBlIEV2ZW50QXJnPFxuICBFdmVudE5hbWUgZXh0ZW5kcyBzdHJpbmcsXG4gIENhblByZXZlbnREZWZhdWx0IGV4dGVuZHMgYm9vbGVhbiB8IHVuZGVmaW5lZCA9IGZhbHNlLFxuICBEYXRhID0gdW5kZWZpbmVkXG4+ID0ge1xuICAvKipcbiAgICogVHlwZSBvZiB0aGUgZXZlbnQgKGUuZy4gYGZvY3VzYCwgYGJsdXJgKVxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogRXZlbnROYW1lO1xuICByZWFkb25seSB0YXJnZXQ/OiBzdHJpbmc7XG59ICYgKENhblByZXZlbnREZWZhdWx0IGV4dGVuZHMgdHJ1ZVxuICA/IHtcbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgd2FzIGNhbGxlZCBvbiB0aGlzIGV2ZW50IG9iamVjdC5cbiAgICAgICAqL1xuICAgICAgcmVhZG9ubHkgZGVmYXVsdFByZXZlbnRlZDogYm9vbGVhbjtcbiAgICAgIC8qKlxuICAgICAgICogUHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gd2hpY2ggaGFwcGVucyBvbiB0aGlzIGV2ZW50LlxuICAgICAgICovXG4gICAgICBwcmV2ZW50RGVmYXVsdCgpOiB2b2lkO1xuICAgIH1cbiAgOiB7fSkgJlxuICAodW5kZWZpbmVkIGV4dGVuZHMgRGF0YVxuICAgID8geyByZWFkb25seSBkYXRhPzogUmVhZG9ubHk8RGF0YT4gfVxuICAgIDogeyByZWFkb25seSBkYXRhOiBSZWFkb25seTxEYXRhPiB9KTtcblxuZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lckNhbGxiYWNrPFxuICBFdmVudE1hcCBleHRlbmRzIEV2ZW50TWFwQmFzZSxcbiAgRXZlbnROYW1lIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBcbj4gPSAoXG4gIGU6IEV2ZW50QXJnPFxuICAgIEV4dHJhY3Q8RXZlbnROYW1lLCBzdHJpbmc+LFxuICAgIEV2ZW50TWFwW0V2ZW50TmFtZV1bJ2NhblByZXZlbnREZWZhdWx0J10sXG4gICAgRXZlbnRNYXBbRXZlbnROYW1lXVsnZGF0YSddXG4gID5cbikgPT4gdm9pZDtcblxuZXhwb3J0IHR5cGUgRXZlbnRDb25zdW1lcjxFdmVudE1hcCBleHRlbmRzIEV2ZW50TWFwQmFzZT4gPSB7XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gZXZlbnRzIGZyb20gdGhlIHBhcmVudCBuYXZpZ2F0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdGhlIGV2ZW50IChlLmcuIGBmb2N1c2AsIGBibHVyYClcbiAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGxpc3RlbmVyIHdoaWNoIGlzIGV4ZWN1dGVkIHVwb24gcmVjZWl2aW5nIHRoZSBldmVudC5cbiAgICovXG4gIGFkZExpc3RlbmVyPEV2ZW50TmFtZSBleHRlbmRzIEtleW9mPEV2ZW50TWFwPj4oXG4gICAgdHlwZTogRXZlbnROYW1lLFxuICAgIGNhbGxiYWNrOiBFdmVudExpc3RlbmVyQ2FsbGJhY2s8RXZlbnRNYXAsIEV2ZW50TmFtZT5cbiAgKTogKCkgPT4gdm9pZDtcbiAgcmVtb3ZlTGlzdGVuZXI8RXZlbnROYW1lIGV4dGVuZHMgS2V5b2Y8RXZlbnRNYXA+PihcbiAgICB0eXBlOiBFdmVudE5hbWUsXG4gICAgY2FsbGJhY2s6IEV2ZW50TGlzdGVuZXJDYWxsYmFjazxFdmVudE1hcCwgRXZlbnROYW1lPlxuICApOiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgRXZlbnRFbWl0dGVyPEV2ZW50TWFwIGV4dGVuZHMgRXZlbnRNYXBCYXNlPiA9IHtcbiAgLyoqXG4gICAqIEVtaXQgYW4gZXZlbnQgdG8gY2hpbGQgc2NyZWVucy5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMudHlwZSBUeXBlIG9mIHRoZSBldmVudCAoZS5nLiBgZm9jdXNgLCBgYmx1cmApXG4gICAqIEBwYXJhbSBbb3B0aW9ucy5kYXRhXSBPcHRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0gW29wdGlvbnMudGFyZ2V0XSBLZXkgb2YgdGhlIHRhcmdldCByb3V0ZSB3aGljaCBzaG91bGQgcmVjZWl2ZSB0aGUgZXZlbnQuXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIGFsbCByb3V0ZXMgcmVjZWl2ZSB0aGUgZXZlbnQuXG4gICAqL1xuICBlbWl0PEV2ZW50TmFtZSBleHRlbmRzIEtleW9mPEV2ZW50TWFwPj4oXG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogRXZlbnROYW1lO1xuICAgICAgdGFyZ2V0Pzogc3RyaW5nO1xuICAgIH0gJiAoRXZlbnRNYXBbRXZlbnROYW1lXVsnY2FuUHJldmVudERlZmF1bHQnXSBleHRlbmRzIHRydWVcbiAgICAgID8geyBjYW5QcmV2ZW50RGVmYXVsdDogdHJ1ZSB9XG4gICAgICA6IHt9KSAmXG4gICAgICAodW5kZWZpbmVkIGV4dGVuZHMgRXZlbnRNYXBbRXZlbnROYW1lXVsnZGF0YSddXG4gICAgICAgID8geyBkYXRhPzogRXZlbnRNYXBbRXZlbnROYW1lXVsnZGF0YSddIH1cbiAgICAgICAgOiB7IGRhdGE6IEV2ZW50TWFwW0V2ZW50TmFtZV1bJ2RhdGEnXSB9KVxuICApOiBFdmVudEFyZzxcbiAgICBFdmVudE5hbWUsXG4gICAgRXZlbnRNYXBbRXZlbnROYW1lXVsnY2FuUHJldmVudERlZmF1bHQnXSxcbiAgICBFdmVudE1hcFtFdmVudE5hbWVdWydkYXRhJ11cbiAgPjtcbn07XG5cbmV4cG9ydCBjbGFzcyBQcml2YXRlVmFsdWVTdG9yZTxUIGV4dGVuZHMgW2FueSwgYW55LCBhbnldPiB7XG4gIC8qKlxuICAgKiBVR0xZIEhBQ0shIERPIE5PVCBVU0UgVEhFIFRZUEUhISFcbiAgICpcbiAgICogVHlwZVNjcmlwdCByZXF1aXJlcyBhIHR5cGUgdG8gYmUgdXNlZCB0byBiZSBhYmxlIHRvIGluZmVyIGl0LlxuICAgKiBUaGUgdHlwZSBzaG91bGQgZXhpc3QgYXMgaXRzIG93biB3aXRob3V0IGFueSBvcGVyYXRpb25zIHN1Y2ggYXMgdW5pb24uXG4gICAqIFNvIHdlIG5lZWQgdG8gZmlndXJlIG91dCBhIHdheSB0byBzdG9yZSB0aGlzIHR5cGUgaW4gYSBwcm9wZXJ0eS5cbiAgICogVGhlIHByb2JsZW0gd2l0aCBhIG5vcm1hbCBwcm9wZXJ0eSBpcyB0aGF0IGl0IHNob3dzIHVwIGluIGludGVsbGlTZW5zZS5cbiAgICogQWRkaW5nIHByaXZhdGUga2V5d29yZCB3b3JrcywgYnV0IHRoZSBhbm5vdGF0aW9uIGlzIHN0cmlwcGVkIGF3YXkgaW4gZGVjbGFyYXRpb24uXG4gICAqIFR1cm5zIG91dCBpZiB3ZSB1c2UgYW4gZW1wdHkgc3RyaW5nLCBpdCBkb2Vzbid0IHNob3cgdXAgaW4gaW50ZWxsaVNlbnNlLlxuICAgKi9cbiAgcHJvdGVjdGVkICcnPzogVDtcbn1cblxudHlwZSBOYXZpZ2F0aW9uSGVscGVyc0NvbW1vbjxcbiAgUGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZSxcbiAgU3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUgPSBOYXZpZ2F0aW9uU3RhdGVcbj4gPSB7XG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhbiBhY3Rpb24gb3IgYW4gdXBkYXRlIGZ1bmN0aW9uIHRvIHRoZSByb3V0ZXIuXG4gICAqIFRoZSB1cGRhdGUgZnVuY3Rpb24gd2lsbCByZWNlaXZlIHRoZSBjdXJyZW50IHN0YXRlLFxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIEFjdGlvbiBvYmplY3Qgb3IgdXBkYXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgZGlzcGF0Y2goXG4gICAgYWN0aW9uOiBOYXZpZ2F0aW9uQWN0aW9uIHwgKChzdGF0ZTogU3RhdGUpID0+IE5hdmlnYXRpb25BY3Rpb24pXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlIHRvIGEgcm91dGUgaW4gY3VycmVudCBuYXZpZ2F0aW9uIHRyZWUuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHJvdXRlIHRvIG5hdmlnYXRlIHRvLlxuICAgKiBAcGFyYW0gW3BhcmFtc10gUGFyYW1zIG9iamVjdCBmb3IgdGhlIHJvdXRlLlxuICAgKi9cbiAgbmF2aWdhdGU8Um91dGVOYW1lIGV4dGVuZHMga2V5b2YgUGFyYW1MaXN0PihcbiAgICAuLi5hcmdzOiAvLyB0aGlzIGZpcnN0IGNvbmRpdGlvbiBhbGxvd3MgdXMgdG8gaXRlcmF0ZSBvdmVyIGEgdW5pb24gdHlwZVxuICAgIC8vIFRoaXMgaXMgdG8gYXZvaWQgZ2V0dGluZyBhIHVuaW9uIG9mIGFsbCB0aGUgcGFyYW1zIGZyb20gYFBhcmFtTGlzdFtSb3V0ZU5hbWVdYCxcbiAgICAvLyB3aGljaCB3aWxsIGdldCBvdXIgdHlwZXMgYWxsIG1peGVkIHVwIGlmIGEgdW5pb24gUm91dGVOYW1lIGlzIHBhc3NlZCBpbi5cbiAgICBSb3V0ZU5hbWUgZXh0ZW5kcyB1bmtub3duXG4gICAgICA/IC8vIFRoaXMgY29uZGl0aW9uIGNoZWNrcyBpZiB0aGUgcGFyYW1zIGFyZSBvcHRpb25hbCxcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgaXQncyBlaXRoZXIgdW5kZWZpbmVkIG9yIGEgdW5pb24gd2l0aCB1bmRlZmluZWRcbiAgICAgICAgdW5kZWZpbmVkIGV4dGVuZHMgUGFyYW1MaXN0W1JvdXRlTmFtZV1cbiAgICAgICAgP1xuICAgICAgICAgICAgfCBbc2NyZWVuOiBSb3V0ZU5hbWVdIC8vIGlmIHRoZSBwYXJhbXMgYXJlIG9wdGlvbmFsLCB3ZSBkb24ndCBoYXZlIHRvIHByb3ZpZGUgaXRcbiAgICAgICAgICAgIHwgW3NjcmVlbjogUm91dGVOYW1lLCBwYXJhbXM6IFBhcmFtTGlzdFtSb3V0ZU5hbWVdXVxuICAgICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgICAgIDogbmV2ZXJcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogTmF2aWdhdGUgdG8gYSByb3V0ZSBpbiBjdXJyZW50IG5hdmlnYXRpb24gdHJlZS5cbiAgICpcbiAgICogQHBhcmFtIHJvdXRlIE9iamVjdCB3aXRoIGBrZXlgIG9yIGBuYW1lYCBmb3IgdGhlIHJvdXRlIHRvIG5hdmlnYXRlIHRvLCBhbmQgYSBgcGFyYW1zYCBvYmplY3QuXG4gICAqL1xuICBuYXZpZ2F0ZTxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIG9wdGlvbnM6IFJvdXRlTmFtZSBleHRlbmRzIHVua25vd25cbiAgICAgID9cbiAgICAgICAgICB8IHsga2V5OiBzdHJpbmc7IHBhcmFtcz86IFBhcmFtTGlzdFtSb3V0ZU5hbWVdOyBtZXJnZT86IGJvb2xlYW4gfVxuICAgICAgICAgIHwge1xuICAgICAgICAgICAgICBuYW1lOiBSb3V0ZU5hbWU7XG4gICAgICAgICAgICAgIGtleT86IHN0cmluZztcbiAgICAgICAgICAgICAgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXTtcbiAgICAgICAgICAgICAgbWVyZ2U/OiBib29sZWFuO1xuICAgICAgICAgICAgfVxuICAgICAgOiBuZXZlclxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgbmF2aWdhdGlvbiBzdGF0ZSB0byB0aGUgcHJvdmlkZWQgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSBzdGF0ZSBOYXZpZ2F0aW9uIHN0YXRlIG9iamVjdC5cbiAgICovXG4gIHJlc2V0KHN0YXRlOiBQYXJ0aWFsU3RhdGU8U3RhdGU+IHwgU3RhdGUpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBHbyBiYWNrIHRvIHRoZSBwcmV2aW91cyByb3V0ZSBpbiBoaXN0b3J5LlxuICAgKi9cbiAgZ29CYWNrKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBzY3JlZW4gaXMgZm9jdXNlZC4gVGhlIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBpZiBmb2N1c2VkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGRvZXNuJ3QgcmUtcmVuZGVyIHNjcmVlbiB3aGVuIHRoZSBmb2N1cyBjaGFuZ2VzLiBTbyBkb24ndCB1c2UgaXQgaW4gYHJlbmRlcmAuXG4gICAqIFRvIGdldCBub3RpZmllZCBvZiBmb2N1cyBjaGFuZ2VzLCB1c2UgYGFkZExpc3RlbmVyKCdmb2N1cycsIGNiKWAgYW5kIGBhZGRMaXN0ZW5lcignYmx1cicsIGNiKWAuXG4gICAqIFRvIGNvbmRpdGlvbmFsbHkgcmVuZGVyIGNvbnRlbnQgYmFzZWQgb24gZm9jdXMgc3RhdGUsIHVzZSB0aGUgYHVzZUlzRm9jdXNlZGAgaG9vay5cbiAgICovXG4gIGlzRm9jdXNlZCgpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBkaXNwYXRjaGluZyBiYWNrIGFjdGlvbiB3aWxsIGJlIGhhbmRsZWQgYnkgbmF2aWdhdGlvbi5cbiAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGRvZXNuJ3QgcmUtcmVuZGVyIHNjcmVlbiB3aGVuIHRoZSByZXN1bHQgY2hhbmdlcy4gU28gZG9uJ3QgdXNlIGl0IGluIGByZW5kZXJgLlxuICAgKi9cbiAgY2FuR29CYWNrKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIG5hdmlnYXRvciBzcGVjaWZpZWQgaW4gdGhlIGBuYW1lYCBwcm9wLlxuICAgKiBJZiBubyBuYW1lIGlzIHNwZWNpZmllZCwgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGdldElkKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmF2aWdhdGlvbiBoZWxwZXJzIGZyb20gYSBwYXJlbnQgbmF2aWdhdG9yIGJhc2VkIG9uIHRoZSBJRC5cbiAgICogSWYgYW4gSUQgaXMgcHJvdmlkZWQsIHRoZSBuYXZpZ2F0aW9uIGhlbHBlciBmcm9tIHRoZSBwYXJlbnQgbmF2aWdhdG9yIHdpdGggbWF0Y2hpbmcgSUQgKGluY2x1ZGluZyBjdXJyZW50KSB3aWxsIGJlIHJldHVybmVkLlxuICAgKiBJZiBubyBJRCBpcyBwcm92aWRlZCwgdGhlIG5hdmlnYXRpb24gaGVscGVyIGZyb20gdGhlIGltbWVkaWF0ZSBwYXJlbnQgbmF2aWdhdG9yIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpZCBPcHRpb25hbCBJRCBvZiBhIHBhcmVudCBuYXZpZ2F0b3IuXG4gICAqL1xuICBnZXRQYXJlbnQ8VCA9IE5hdmlnYXRpb25IZWxwZXJzPFBhcmFtTGlzdEJhc2U+IHwgdW5kZWZpbmVkPihpZD86IHN0cmluZyk6IFQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hdmlnYXRvcidzIHN0YXRlLlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgZG9lc24ndCByZS1yZW5kZXIgc2NyZWVuIHdoZW4gdGhlIHJlc3VsdCBjaGFuZ2VzLiBTbyBkb24ndCB1c2UgaXQgaW4gYHJlbmRlcmAuXG4gICAqL1xuICBnZXRTdGF0ZSgpOiBTdGF0ZTtcbn0gJiBQcml2YXRlVmFsdWVTdG9yZTxbUGFyYW1MaXN0LCB1bmtub3duLCB1bmtub3duXT47XG5cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25IZWxwZXJzPFxuICBQYXJhbUxpc3QgZXh0ZW5kcyBQYXJhbUxpc3RCYXNlLFxuICBFdmVudE1hcCBleHRlbmRzIEV2ZW50TWFwQmFzZSA9IHt9XG4+ID0gTmF2aWdhdGlvbkhlbHBlcnNDb21tb248UGFyYW1MaXN0PiAmXG4gIEV2ZW50RW1pdHRlcjxFdmVudE1hcD4gJiB7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBwYXJhbSBvYmplY3QgZm9yIHRoZSByb3V0ZS5cbiAgICAgKiBUaGUgbmV3IHBhcmFtcyB3aWxsIGJlIHNoYWxsb3cgbWVyZ2VkIHdpdGggdGhlIG9sZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIFBhcmFtcyBvYmplY3QgZm9yIHRoZSBjdXJyZW50IHJvdXRlLlxuICAgICAqL1xuICAgIHNldFBhcmFtczxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgICAgcGFyYW1zOiBQYXJ0aWFsPFBhcmFtTGlzdFtSb3V0ZU5hbWVdPlxuICAgICk6IHZvaWQ7XG4gIH07XG5cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25Db250YWluZXJQcm9wcyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWwgbmF2aWdhdGlvbiBzdGF0ZSBmb3IgdGhlIGNoaWxkIG5hdmlnYXRvcnMuXG4gICAqL1xuICBpbml0aWFsU3RhdGU/OiBJbml0aWFsU3RhdGU7XG4gIC8qKlxuICAgKiBDYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0IG5hdmlnYXRpb24gc3RhdGUgd2hlbiBpdCBjaGFuZ2VzLlxuICAgKi9cbiAgb25TdGF0ZUNoYW5nZT86IChzdGF0ZTogTmF2aWdhdGlvblN0YXRlIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuICAvKipcbiAgICogQ2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYW4gYWN0aW9uIGlzIG5vdCBoYW5kbGVkLlxuICAgKi9cbiAgb25VbmhhbmRsZWRBY3Rpb24/OiAoYWN0aW9uOiBOYXZpZ2F0aW9uQWN0aW9uKSA9PiB2b2lkO1xuICAvKipcbiAgICogV2hldGhlciB0aGlzIG5hdmlnYXRpb24gY29udGFpbmVyIHNob3VsZCBiZSBpbmRlcGVuZGVudCBvZiBwYXJlbnQgY29udGFpbmVycy5cbiAgICogSWYgdGhpcyBpcyBub3Qgc2V0IHRvIGB0cnVlYCwgdGhpcyBjb250YWluZXIgY2Fubm90IGJlIG5lc3RlZCBpbnNpZGUgYW5vdGhlciBjb250YWluZXIuXG4gICAqIFNldHRpbmcgaXQgdG8gYHRydWVgIGRpc2Nvbm5lY3RzIGFueSBjaGlsZHJlbiBuYXZpZ2F0b3JzIGZyb20gcGFyZW50IGNvbnRhaW5lci5cbiAgICovXG4gIGluZGVwZW5kZW50PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENoaWxkcmVuIGVsZW1lbnRzIHRvIHJlbmRlci5cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uUHJvcDxcbiAgUGFyYW1MaXN0IGV4dGVuZHMge30sXG4gIFJvdXRlTmFtZSBleHRlbmRzIGtleW9mIFBhcmFtTGlzdCA9IEtleW9mPFBhcmFtTGlzdD4sXG4gIE5hdmlnYXRvcklEIGV4dGVuZHMgc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICBTdGF0ZSBleHRlbmRzIE5hdmlnYXRpb25TdGF0ZSA9IE5hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3Q+LFxuICBTY3JlZW5PcHRpb25zIGV4dGVuZHMge30gPSB7fSxcbiAgRXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcEJhc2UgPSB7fVxuPiA9IE9taXQ8TmF2aWdhdGlvbkhlbHBlcnNDb21tb248UGFyYW1MaXN0LCBTdGF0ZT4sICdnZXRQYXJlbnQnPiAmIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hdmlnYXRpb24gcHJvcCBmcm9tIGEgcGFyZW50IG5hdmlnYXRvciBiYXNlZCBvbiB0aGUgSUQuXG4gICAqIElmIGFuIElEIGlzIHByb3ZpZGVkLCB0aGUgbmF2aWdhdGlvbiBwcm9wIGZyb20gdGhlIHBhcmVudCBuYXZpZ2F0b3Igd2l0aCBtYXRjaGluZyBJRCAoaW5jbHVkaW5nIGN1cnJlbnQpIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqIElmIG5vIElEIGlzIHByb3ZpZGVkLCB0aGUgbmF2aWdhdGlvbiBwcm9wIGZyb20gdGhlIGltbWVkaWF0ZSBwYXJlbnQgbmF2aWdhdG9yIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpZCBPcHRpb25hbCBJRCBvZiBhIHBhcmVudCBuYXZpZ2F0b3IuXG4gICAqL1xuICBnZXRQYXJlbnQ8VCA9IE5hdmlnYXRpb25Qcm9wPFBhcmFtTGlzdEJhc2U+IHwgdW5kZWZpbmVkPihpZD86IE5hdmlnYXRvcklEKTogVDtcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBwYXJhbSBvYmplY3QgZm9yIHRoZSByb3V0ZS5cbiAgICogVGhlIG5ldyBwYXJhbXMgd2lsbCBiZSBzaGFsbG93IG1lcmdlZCB3aXRoIHRoZSBvbGQgb25lLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIFBhcmFtcyBvYmplY3QgZm9yIHRoZSBjdXJyZW50IHJvdXRlLlxuICAgKi9cbiAgc2V0UGFyYW1zKFxuICAgIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV0gZXh0ZW5kcyB1bmRlZmluZWRcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IFBhcnRpYWw8UGFyYW1MaXN0W1JvdXRlTmFtZV0+XG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgb3B0aW9ucyBmb3IgdGhlIHJvdXRlLlxuICAgKiBUaGUgb3B0aW9ucyBvYmplY3Qgd2lsbCBiZSBzaGFsbG93IG1lcmdlZCB3aXRoIGRlZmF1bHQgb3B0aW9ucyBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IGZvciB0aGUgcm91dGUuXG4gICAqL1xuICBzZXRPcHRpb25zKG9wdGlvbnM6IFBhcnRpYWw8U2NyZWVuT3B0aW9ucz4pOiB2b2lkO1xufSAmIEV2ZW50Q29uc3VtZXI8RXZlbnRNYXAgJiBFdmVudE1hcENvcmU8U3RhdGU+PiAmXG4gIFByaXZhdGVWYWx1ZVN0b3JlPFtQYXJhbUxpc3QsIFJvdXRlTmFtZSwgRXZlbnRNYXBdPjtcblxuZXhwb3J0IHR5cGUgUm91dGVQcm9wPFxuICBQYXJhbUxpc3QgZXh0ZW5kcyBQYXJhbUxpc3RCYXNlLFxuICBSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3QgPSBLZXlvZjxQYXJhbUxpc3Q+XG4+ID0gUm91dGU8RXh0cmFjdDxSb3V0ZU5hbWUsIHN0cmluZz4sIFBhcmFtTGlzdFtSb3V0ZU5hbWVdPjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTmF2aWdhdGlvblByb3A8XG4gIEEgZXh0ZW5kcyBOYXZpZ2F0aW9uUHJvcDxQYXJhbUxpc3RCYXNlLCBzdHJpbmcsIGFueSwgYW55LCBhbnk+LFxuICBCIGV4dGVuZHMgTmF2aWdhdGlvbkhlbHBlcnNDb21tb248UGFyYW1MaXN0QmFzZSwgYW55PlxuPiA9IE9taXQ8QSAmIEIsIGtleW9mIE5hdmlnYXRpb25Qcm9wPGFueT4+ICZcbiAgTmF2aWdhdGlvblByb3A8XG4gICAgLyoqXG4gICAgICogUGFyYW0gbGlzdCBmcm9tIGJvdGggbmF2aWdhdGlvbiBvYmplY3RzIG5lZWRzIHRvIGJlIGNvbWJpbmVkXG4gICAgICogRm9yIGV4YW1wbGUsIHdlIHNob3VsZCBiZSBhYmxlIHRvIG5hdmlnYXRlIHRvIHNjcmVlbnMgaW4gYm90aCBBIGFuZCBCXG4gICAgICovXG4gICAgKEEgZXh0ZW5kcyBOYXZpZ2F0aW9uSGVscGVyc0NvbW1vbjxpbmZlciBUPiA/IFQgOiBuZXZlcikgJlxuICAgICAgKEIgZXh0ZW5kcyBOYXZpZ2F0aW9uSGVscGVyc0NvbW1vbjxpbmZlciBVPiA/IFUgOiBuZXZlciksXG4gICAgLyoqXG4gICAgICogVGhlIHJvdXRlIG5hbWUgc2hvdWxkIHJlZmVyIHRvIHRoZSByb3V0ZSBuYW1lIHNwZWNpZmllZCBpbiB0aGUgZmlyc3QgdHlwZVxuICAgICAqIElkZWFsbHkgaXQgc2hvdWxkIHdvcmsgZm9yIGFueSBvZiB0aGVtLCBidXQgaXQncyBub3QgcG9zc2libGUgdG8gaW5mZXIgdGhhdCB3YXlcbiAgICAgKi9cbiAgICBBIGV4dGVuZHMgTmF2aWdhdGlvblByb3A8YW55LCBpbmZlciBSPiA/IFIgOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogSUQgZnJvbSBib3RoIG5hdmlnYXRpb24gb2JqZWN0cyBuZWVkcyB0byBiZSBjb21iaW5lZCBmb3IgYGdldFBhcmVudGBcbiAgICAgKi9cbiAgICB8IChBIGV4dGVuZHMgTmF2aWdhdGlvblByb3A8YW55LCBhbnksIGluZmVyIEk+ID8gSSA6IG5ldmVyKVxuICAgIHwgKEIgZXh0ZW5kcyBOYXZpZ2F0aW9uUHJvcDxhbnksIGFueSwgaW5mZXIgSj4gPyBKIDogbmV2ZXIpLFxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHN0YXRlIHNob3VsZCByZWZlciB0byB0aGUgc3RhdGUgc3BlY2lmaWVkIGluIHRoZSBmaXJzdCB0eXBlXG4gICAgICovXG4gICAgQSBleHRlbmRzIE5hdmlnYXRpb25Qcm9wPGFueSwgYW55LCBhbnksIGluZmVyIFM+ID8gUyA6IE5hdmlnYXRpb25TdGF0ZSxcbiAgICAvKipcbiAgICAgKiBTY3JlZW4gb3B0aW9ucyBmcm9tIGJvdGggbmF2aWdhdGlvbiBvYmplY3RzIG5lZWRzIHRvIGJlIGNvbWJpbmVkXG4gICAgICogVGhpcyBhbGxvd3MgdHlwZWNoZWNraW5nIGBzZXRPcHRpb25zYFxuICAgICAqL1xuICAgIChBIGV4dGVuZHMgTmF2aWdhdGlvblByb3A8YW55LCBhbnksIGFueSwgYW55LCBpbmZlciBPPiA/IE8gOiB7fSkgJlxuICAgICAgKEIgZXh0ZW5kcyBOYXZpZ2F0aW9uUHJvcDxhbnksIGFueSwgYW55LCBhbnksIGluZmVyIFA+ID8gUCA6IHt9KSxcbiAgICAvKipcbiAgICAgKiBFdmVudCBjb25zdW1lciBjb25maWcgc2hvdWxkIHJlZmVyIHRvIHRoZSBjb25maWcgc3BlY2lmaWVkIGluIHRoZSBmaXJzdCB0eXBlXG4gICAgICogVGhpcyBhbGxvd3MgdHlwZWNoZWNraW5nIGBhZGRMaXN0ZW5lcmAvYHJlbW92ZUxpc3RlbmVyYFxuICAgICAqL1xuICAgIEEgZXh0ZW5kcyBOYXZpZ2F0aW9uUHJvcDxhbnksIGFueSwgYW55LCBhbnksIGFueSwgaW5mZXIgRT4gPyBFIDoge31cbiAgPjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlU2NyZWVuUHJvcHM8XG4gIEEgZXh0ZW5kcyB7XG4gICAgbmF2aWdhdGlvbjogTmF2aWdhdGlvblByb3A8XG4gICAgICBQYXJhbUxpc3RCYXNlLFxuICAgICAgc3RyaW5nLFxuICAgICAgc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgYW55LFxuICAgICAgYW55LFxuICAgICAgYW55XG4gICAgPjtcbiAgICByb3V0ZTogUm91dGVQcm9wPFBhcmFtTGlzdEJhc2U+O1xuICB9LFxuICBCIGV4dGVuZHMge1xuICAgIG5hdmlnYXRpb246IE5hdmlnYXRpb25IZWxwZXJzQ29tbW9uPGFueSwgYW55PjtcbiAgfVxuPiA9IHtcbiAgbmF2aWdhdGlvbjogQ29tcG9zaXRlTmF2aWdhdGlvblByb3A8QVsnbmF2aWdhdGlvbiddLCBCWyduYXZpZ2F0aW9uJ10+O1xuICByb3V0ZTogQVsncm91dGUnXTtcbn07XG5cbmV4cG9ydCB0eXBlIERlc2NyaXB0b3I8XG4gIFNjcmVlbk9wdGlvbnMgZXh0ZW5kcyB7fSxcbiAgTmF2aWdhdGlvbiBleHRlbmRzIE5hdmlnYXRpb25Qcm9wPGFueSwgYW55LCBhbnksIGFueSwgYW55LCBhbnk+LFxuICBSb3V0ZSBleHRlbmRzIFJvdXRlUHJvcDxhbnksIGFueT5cbj4gPSB7XG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGNvbXBvbmVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyByb3V0ZS5cbiAgICovXG4gIHJlbmRlcigpOiBKU1guRWxlbWVudDtcblxuICAvKipcbiAgICogT3B0aW9ucyBmb3IgdGhlIHJvdXRlLlxuICAgKi9cbiAgb3B0aW9uczogU2NyZWVuT3B0aW9ucztcblxuICAvKipcbiAgICogUm91dGUgb2JqZWN0IGZvciB0aGUgc2NyZWVuXG4gICAqL1xuICByb3V0ZTogUm91dGU7XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRpb24gb2JqZWN0IGZvciB0aGUgc2NyZWVuXG4gICAqL1xuICBuYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uO1xufTtcblxuZXhwb3J0IHR5cGUgU2NyZWVuTGlzdGVuZXJzPFxuICBTdGF0ZSBleHRlbmRzIE5hdmlnYXRpb25TdGF0ZSxcbiAgRXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcEJhc2Vcbj4gPSBQYXJ0aWFsPHtcbiAgW0V2ZW50TmFtZSBpbiBrZXlvZiAoRXZlbnRNYXAgJiBFdmVudE1hcENvcmU8U3RhdGU+KV06IEV2ZW50TGlzdGVuZXJDYWxsYmFjazxcbiAgICBFdmVudE1hcCxcbiAgICBFdmVudE5hbWVcbiAgPjtcbn0+O1xuXG50eXBlIFNjcmVlbkNvbXBvbmVudFR5cGU8XG4gIFBhcmFtTGlzdCBleHRlbmRzIFBhcmFtTGlzdEJhc2UsXG4gIFJvdXRlTmFtZSBleHRlbmRzIGtleW9mIFBhcmFtTGlzdFxuPiA9XG4gIHwgUmVhY3QuQ29tcG9uZW50VHlwZTx7XG4gICAgICByb3V0ZTogUm91dGVQcm9wPFBhcmFtTGlzdCwgUm91dGVOYW1lPjtcbiAgICAgIG5hdmlnYXRpb246IGFueTtcbiAgICB9PlxuICB8IFJlYWN0LkNvbXBvbmVudFR5cGU8e30+O1xuXG5leHBvcnQgdHlwZSBSb3V0ZUNvbmZpZ0NvbXBvbmVudDxcbiAgUGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZSxcbiAgUm91dGVOYW1lIGV4dGVuZHMga2V5b2YgUGFyYW1MaXN0XG4+ID1cbiAgfCB7XG4gICAgICAvKipcbiAgICAgICAqIFJlYWN0IGNvbXBvbmVudCB0byByZW5kZXIgZm9yIHRoaXMgc2NyZWVuLlxuICAgICAgICovXG4gICAgICBjb21wb25lbnQ6IFNjcmVlbkNvbXBvbmVudFR5cGU8UGFyYW1MaXN0LCBSb3V0ZU5hbWU+O1xuICAgICAgZ2V0Q29tcG9uZW50PzogbmV2ZXI7XG4gICAgICBjaGlsZHJlbj86IG5ldmVyO1xuICAgIH1cbiAgfCB7XG4gICAgICAvKipcbiAgICAgICAqIExhemlseSBnZXQgYSBSZWFjdCBjb21wb25lbnQgdG8gcmVuZGVyIGZvciB0aGlzIHNjcmVlbi5cbiAgICAgICAqL1xuICAgICAgZ2V0Q29tcG9uZW50OiAoKSA9PiBTY3JlZW5Db21wb25lbnRUeXBlPFBhcmFtTGlzdCwgUm91dGVOYW1lPjtcbiAgICAgIGNvbXBvbmVudD86IG5ldmVyO1xuICAgICAgY2hpbGRyZW4/OiBuZXZlcjtcbiAgICB9XG4gIHwge1xuICAgICAgLyoqXG4gICAgICAgKiBSZW5kZXIgY2FsbGJhY2sgdG8gcmVuZGVyIGNvbnRlbnQgb2YgdGhpcyBzY3JlZW4uXG4gICAgICAgKi9cbiAgICAgIGNoaWxkcmVuOiAocHJvcHM6IHtcbiAgICAgICAgcm91dGU6IFJvdXRlUHJvcDxQYXJhbUxpc3QsIFJvdXRlTmFtZT47XG4gICAgICAgIG5hdmlnYXRpb246IGFueTtcbiAgICAgIH0pID0+IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAgIGNvbXBvbmVudD86IG5ldmVyO1xuICAgICAgZ2V0Q29tcG9uZW50PzogbmV2ZXI7XG4gICAgfTtcblxuZXhwb3J0IHR5cGUgUm91dGVDb25maWc8XG4gIFBhcmFtTGlzdCBleHRlbmRzIFBhcmFtTGlzdEJhc2UsXG4gIFJvdXRlTmFtZSBleHRlbmRzIGtleW9mIFBhcmFtTGlzdCxcbiAgU3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUsXG4gIFNjcmVlbk9wdGlvbnMgZXh0ZW5kcyB7fSxcbiAgRXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcEJhc2Vcbj4gPSB7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBrZXkgZm9yIHRoaXMgc2NyZWVuLiBUaGlzIGRvZXNuJ3QgbmVlZCB0byBiZSB1bmlxdWUuXG4gICAqIElmIHRoZSBrZXkgY2hhbmdlcywgZXhpc3Rpbmcgc2NyZWVucyB3aXRoIHRoaXMgbmFtZSB3aWxsIGJlIHJlbW92ZWQgb3IgcmVzZXQuXG4gICAqIFVzZWZ1bCB3aGVuIHdlIGhhdmUgc29tZSBjb21tb24gc2NyZWVucyBhbmQgaGF2ZSBjb25kaXRpb25hbCByZW5kZXJpbmcuXG4gICAqL1xuICBuYXZpZ2F0aW9uS2V5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSb3V0ZSBuYW1lIG9mIHRoaXMgc2NyZWVuLlxuICAgKi9cbiAgbmFtZTogUm91dGVOYW1lO1xuXG4gIC8qKlxuICAgKiBOYXZpZ2F0b3Igb3B0aW9ucyBmb3IgdGhpcyBzY3JlZW4uXG4gICAqL1xuICBvcHRpb25zPzpcbiAgICB8IFNjcmVlbk9wdGlvbnNcbiAgICB8ICgocHJvcHM6IHtcbiAgICAgICAgcm91dGU6IFJvdXRlUHJvcDxQYXJhbUxpc3QsIFJvdXRlTmFtZT47XG4gICAgICAgIG5hdmlnYXRpb246IGFueTtcbiAgICAgIH0pID0+IFNjcmVlbk9wdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lcnMgZm9yIHRoaXMgc2NyZWVuLlxuICAgKi9cbiAgbGlzdGVuZXJzPzpcbiAgICB8IFNjcmVlbkxpc3RlbmVyczxTdGF0ZSwgRXZlbnRNYXA+XG4gICAgfCAoKHByb3BzOiB7XG4gICAgICAgIHJvdXRlOiBSb3V0ZVByb3A8UGFyYW1MaXN0LCBSb3V0ZU5hbWU+O1xuICAgICAgICBuYXZpZ2F0aW9uOiBhbnk7XG4gICAgICB9KSA9PiBTY3JlZW5MaXN0ZW5lcnM8U3RhdGUsIEV2ZW50TWFwPik7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbiB1bmlxdWUgSUQgZm9yIHRoaXMgc2NyZWVuLlxuICAgKiBSZWNlaXZlcyBhbiBvYmplY3Qgd2l0aCB0aGUgcm91dGUgcGFyYW1zLlxuICAgKiBGb3IgYSBnaXZlbiBzY3JlZW4gbmFtZSwgdGhlcmUgd2lsbCBhbHdheXMgYmUgb25seSBvbmUgc2NyZWVuIGNvcnJlc3BvbmRpbmcgdG8gYW4gSUQuXG4gICAqIElmIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLCBpdCBhY3RzIHNhbWUgYXMgbm8gYGdldElkYCBiZWluZyBzcGVjaWZpZWQuXG4gICAqL1xuICBnZXRJZD86ICh7IHBhcmFtcyB9OiB7IHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV0gfSkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBJbml0aWFsIHBhcmFtcyBvYmplY3QgZm9yIHRoZSByb3V0ZS5cbiAgICovXG4gIGluaXRpYWxQYXJhbXM/OiBQYXJ0aWFsPFBhcmFtTGlzdFtSb3V0ZU5hbWVdPjtcbn0gJiBSb3V0ZUNvbmZpZ0NvbXBvbmVudDxQYXJhbUxpc3QsIFJvdXRlTmFtZT47XG5cbmV4cG9ydCB0eXBlIFJvdXRlR3JvdXBDb25maWc8XG4gIFBhcmFtTGlzdCBleHRlbmRzIFBhcmFtTGlzdEJhc2UsXG4gIFNjcmVlbk9wdGlvbnMgZXh0ZW5kcyB7fVxuPiA9IHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGtleSBmb3IgdGhlIHNjcmVlbnMgaW4gdGhpcyBncm91cC5cbiAgICogSWYgdGhlIGtleSBjaGFuZ2VzLCBhbGwgZXhpc3Rpbmcgc2NyZWVucyBpbiB0aGlzIGdyb3VwIHdpbGwgYmUgcmVtb3ZlZCBvciByZXNldC5cbiAgICovXG4gIG5hdmlnYXRpb25LZXk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRvciBvcHRpb25zIGZvciB0aGlzIHNjcmVlbi5cbiAgICovXG4gIHNjcmVlbk9wdGlvbnM/OlxuICAgIHwgU2NyZWVuT3B0aW9uc1xuICAgIHwgKChwcm9wczoge1xuICAgICAgICByb3V0ZTogUm91dGVQcm9wPFBhcmFtTGlzdCwga2V5b2YgUGFyYW1MaXN0PjtcbiAgICAgICAgbmF2aWdhdGlvbjogYW55O1xuICAgICAgfSkgPT4gU2NyZWVuT3B0aW9ucyk7XG4gIC8qKlxuICAgKiBDaGlsZHJlbiBSZWFjdCBFbGVtZW50cyB0byBleHRyYWN0IHRoZSByb3V0ZSBjb25maWd1cmF0aW9uIGZyb20uXG4gICAqIE9ubHkgYFNjcmVlbmAsIGBHcm91cGAgYW5kIGBSZWFjdC5GcmFnbWVudGAgYXJlIHN1cHBvcnRlZCBhcyBjaGlsZHJlbi5cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQ29udGFpbmVyRXZlbnRNYXAgPSB7XG4gIC8qKlxuICAgKiBFdmVudCB3aGljaCBmaXJlcyB3aGVuIHRoZSBuYXZpZ2F0aW9uIHN0YXRlIGNoYW5nZXMuXG4gICAqL1xuICBzdGF0ZToge1xuICAgIGRhdGE6IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHVwZGF0ZWQgc3RhdGUgb2JqZWN0IGFmdGVyIHRoZSBzdGF0ZSBjaGFuZ2UuXG4gICAgICAgKi9cbiAgICAgIHN0YXRlOiBOYXZpZ2F0aW9uU3RhdGUgfCBQYXJ0aWFsU3RhdGU8TmF2aWdhdGlvblN0YXRlPiB8IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9O1xuICAvKipcbiAgICogRXZlbnQgd2hpY2ggZmlyZXMgd2hlbiBjdXJyZW50IG9wdGlvbnMgY2hhbmdlcy5cbiAgICovXG4gIG9wdGlvbnM6IHsgZGF0YTogeyBvcHRpb25zOiBvYmplY3QgfSB9O1xuICAvKipcbiAgICogRXZlbnQgd2hpY2ggZmlyZXMgd2hlbiBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZC5cbiAgICogT25seSBpbnRlbmRlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLCBkb24ndCB1c2UgaXQgZm9yIGFwcCBsb2dpYy5cbiAgICogVGhpcyBldmVudCB3aWxsIGJlIGVtaXR0ZWQgYmVmb3JlIHN0YXRlIGNoYW5nZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG4gICAqL1xuICBfX3Vuc2FmZV9hY3Rpb25fXzoge1xuICAgIGRhdGE6IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGFjdGlvbiBvYmplY3Qgd2hpY2ggd2FzIGRpc3BhdGNoZWQuXG4gICAgICAgKi9cbiAgICAgIGFjdGlvbjogTmF2aWdhdGlvbkFjdGlvbjtcbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciB0aGUgYWN0aW9uIHdhcyBhIG5vLW9wLCBpLmUuIHJlc3VsdGVkIGFueSBzdGF0ZSBjaGFuZ2VzLlxuICAgICAgICovXG4gICAgICBub29wOiBib29sZWFuO1xuICAgICAgLyoqXG4gICAgICAgKiBTdGFjayB0cmFjZSBvZiB0aGUgYWN0aW9uLCB0aGlzIHdpbGwgb25seSBiZSBhdmFpbGFibGUgZHVyaW5nIGRldmVsb3BtZW50LlxuICAgICAgICovXG4gICAgICBzdGFjazogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIH07XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmPFBhcmFtTGlzdCBleHRlbmRzIHt9PiA9XG4gIE5hdmlnYXRpb25IZWxwZXJzPFBhcmFtTGlzdD4gJlxuICAgIEV2ZW50Q29uc3VtZXI8TmF2aWdhdGlvbkNvbnRhaW5lckV2ZW50TWFwPiAmIHtcbiAgICAgIC8qKlxuICAgICAgICogUmVzZXQgdGhlIG5hdmlnYXRpb24gc3RhdGUgb2YgdGhlIHJvb3QgbmF2aWdhdG9yIHRvIHRoZSBwcm92aWRlZCBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gc3RhdGUgTmF2aWdhdGlvbiBzdGF0ZSBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIHJlc2V0Um9vdChzdGF0ZT86IFBhcnRpYWxTdGF0ZTxOYXZpZ2F0aW9uU3RhdGU+IHwgTmF2aWdhdGlvblN0YXRlKTogdm9pZDtcbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSByZWh5ZHJhdGVkIG5hdmlnYXRpb24gc3RhdGUgb2YgdGhlIG5hdmlnYXRpb24gdHJlZS5cbiAgICAgICAqL1xuICAgICAgZ2V0Um9vdFN0YXRlKCk6IE5hdmlnYXRpb25TdGF0ZTtcbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBjdXJyZW50bHkgZm9jdXNlZCBuYXZpZ2F0aW9uIHJvdXRlLlxuICAgICAgICovXG4gICAgICBnZXRDdXJyZW50Um91dGUoKTogUm91dGU8c3RyaW5nPiB8IHVuZGVmaW5lZDtcbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBjdXJyZW50bHkgZm9jdXNlZCByb3V0ZSdzIG9wdGlvbnMuXG4gICAgICAgKi9cbiAgICAgIGdldEN1cnJlbnRPcHRpb25zKCk6IG9iamVjdCB8IHVuZGVmaW5lZDtcbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciB0aGUgbmF2aWdhdGlvbiBjb250YWluZXIgaXMgcmVhZHkgdG8gaGFuZGxlIGFjdGlvbnMuXG4gICAgICAgKi9cbiAgICAgIGlzUmVhZHkoKTogYm9vbGVhbjtcbiAgICB9O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmV2l0aEN1cnJlbnQ8UGFyYW1MaXN0IGV4dGVuZHMge30+ID1cbiAgTmF2aWdhdGlvbkNvbnRhaW5lclJlZjxQYXJhbUxpc3Q+ICYge1xuICAgIGN1cnJlbnQ6IE5hdmlnYXRpb25Db250YWluZXJSZWY8UGFyYW1MaXN0PiB8IG51bGw7XG4gIH07XG5cbmV4cG9ydCB0eXBlIFR5cGVkTmF2aWdhdG9yPFxuICBQYXJhbUxpc3QgZXh0ZW5kcyBQYXJhbUxpc3RCYXNlLFxuICBTdGF0ZSBleHRlbmRzIE5hdmlnYXRpb25TdGF0ZSxcbiAgU2NyZWVuT3B0aW9ucyBleHRlbmRzIHt9LFxuICBFdmVudE1hcCBleHRlbmRzIEV2ZW50TWFwQmFzZSxcbiAgTmF2aWdhdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+XG4+ID0ge1xuICAvKipcbiAgICogTmF2aWdhdG9yIGNvbXBvbmVudCB3aGljaCBtYW5hZ2VzIHRoZSBjaGlsZCBzY3JlZW5zLlxuICAgKi9cbiAgTmF2aWdhdG9yOiBSZWFjdC5Db21wb25lbnRUeXBlPFxuICAgIE9taXQ8XG4gICAgICBSZWFjdC5Db21wb25lbnRQcm9wczxOYXZpZ2F0b3I+LFxuICAgICAga2V5b2YgRGVmYXVsdE5hdmlnYXRvck9wdGlvbnM8YW55LCBhbnksIGFueSwgYW55PlxuICAgID4gJlxuICAgICAgRGVmYXVsdE5hdmlnYXRvck9wdGlvbnM8UGFyYW1MaXN0LCBTdGF0ZSwgU2NyZWVuT3B0aW9ucywgRXZlbnRNYXA+XG4gID47XG4gIC8qKlxuICAgKiBDb21wb25lbnQgdXNlZCBmb3IgZ3JvdXBpbmcgbXVsdGlwbGUgcm91dGUgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIEdyb3VwOiBSZWFjdC5Db21wb25lbnRUeXBlPFJvdXRlR3JvdXBDb25maWc8UGFyYW1MaXN0LCBTY3JlZW5PcHRpb25zPj47XG4gIC8qKlxuICAgKiBDb21wb25lbnQgdXNlZCBmb3Igc3BlY2lmeWluZyByb3V0ZSBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgU2NyZWVuOiA8Um91dGVOYW1lIGV4dGVuZHMga2V5b2YgUGFyYW1MaXN0PihcbiAgICBfOiBSb3V0ZUNvbmZpZzxQYXJhbUxpc3QsIFJvdXRlTmFtZSwgU3RhdGUsIFNjcmVlbk9wdGlvbnMsIEV2ZW50TWFwPlxuICApID0+IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0b3JTY3JlZW5QYXJhbXM8XG4gIFBhcmFtTGlzdCxcbiAgU3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUgPSBOYXZpZ2F0aW9uU3RhdGVcbj4gPVxuICB8IHtcbiAgICAgIHNjcmVlbj86IG5ldmVyO1xuICAgICAgcGFyYW1zPzogbmV2ZXI7XG4gICAgICBpbml0aWFsPzogbmV2ZXI7XG4gICAgICBwYXRoPzogc3RyaW5nO1xuICAgICAgc3RhdGU6IFBhcnRpYWxTdGF0ZTxTdGF0ZT4gfCBTdGF0ZSB8IHVuZGVmaW5lZDtcbiAgICB9XG4gIHwge1xuICAgICAgW1JvdXRlTmFtZSBpbiBrZXlvZiBQYXJhbUxpc3RdOiB1bmRlZmluZWQgZXh0ZW5kcyBQYXJhbUxpc3RbUm91dGVOYW1lXVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHNjcmVlbjogUm91dGVOYW1lO1xuICAgICAgICAgICAgcGFyYW1zPzogUGFyYW1MaXN0W1JvdXRlTmFtZV07XG4gICAgICAgICAgICBpbml0aWFsPzogYm9vbGVhbjtcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgICAgICAgICBzdGF0ZT86IG5ldmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBzY3JlZW46IFJvdXRlTmFtZTtcbiAgICAgICAgICAgIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV07XG4gICAgICAgICAgICBpbml0aWFsPzogYm9vbGVhbjtcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgICAgICAgICBzdGF0ZT86IG5ldmVyO1xuICAgICAgICAgIH07XG4gICAgfVtrZXlvZiBQYXJhbUxpc3RdO1xuXG5leHBvcnQgdHlwZSBQYXRoQ29uZmlnPFBhcmFtTGlzdCBleHRlbmRzIHt9PiA9IHtcbiAgcGF0aD86IHN0cmluZztcbiAgZXhhY3Q/OiBib29sZWFuO1xuICBwYXJzZT86IFJlY29yZDxzdHJpbmcsICh2YWx1ZTogc3RyaW5nKSA9PiBhbnk+O1xuICBzdHJpbmdpZnk/OiBSZWNvcmQ8c3RyaW5nLCAodmFsdWU6IGFueSkgPT4gc3RyaW5nPjtcbiAgc2NyZWVucz86IFBhdGhDb25maWdNYXA8UGFyYW1MaXN0PjtcbiAgaW5pdGlhbFJvdXRlTmFtZT86IGtleW9mIFBhcmFtTGlzdDtcbn07XG5cbmV4cG9ydCB0eXBlIFBhdGhDb25maWdNYXA8UGFyYW1MaXN0IGV4dGVuZHMge30+ID0ge1xuICBbUm91dGVOYW1lIGluIGtleW9mIFBhcmFtTGlzdF0/OiBOb25OdWxsYWJsZTxcbiAgICBQYXJhbUxpc3RbUm91dGVOYW1lXVxuICA+IGV4dGVuZHMgTmF2aWdhdG9yU2NyZWVuUGFyYW1zPGluZmVyIFQsIGFueT5cbiAgICA/IHN0cmluZyB8IFBhdGhDb25maWc8VD5cbiAgICA6IHN0cmluZyB8IE9taXQ8UGF0aENvbmZpZzx7fT4sICdzY3JlZW5zJyB8ICdpbml0aWFsUm91dGVOYW1lJz47XG59O1xuIl19