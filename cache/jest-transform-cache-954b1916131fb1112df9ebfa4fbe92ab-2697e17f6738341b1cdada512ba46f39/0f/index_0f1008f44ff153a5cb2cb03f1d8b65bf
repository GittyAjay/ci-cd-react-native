4068e407cd9f80d294a22a7e5d6a6545
'use strict';

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
  try {
    return decodeURIComponent(components.join(''));
  } catch (err) {}

  if (components.length === 1) {
    return components;
  }

  split = split || 1;
  var left = components.slice(0, split);
  var right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    var tokens = input.match(singleMatcher);

    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher);
    }

    return input;
  }
}

function customDecodeURIComponent(input) {
  var replaceMap = {
    '%FE%FF': "\uFFFD\uFFFD",
    '%FF%FE': "\uFFFD\uFFFD"
  };
  var match = multiMatcher.exec(input);

  while (match) {
    try {
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch (err) {
      var result = decode(match[0]);

      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }

    match = multiMatcher.exec(input);
  }

  replaceMap['%C2'] = "\uFFFD";
  var entries = Object.keys(replaceMap);

  for (var i = 0; i < entries.length; i++) {
    var key = entries[i];
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }

  return input;
}

module.exports = function (encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  }

  try {
    encodedURI = encodedURI.replace(/\+/g, ' ');
    return decodeURIComponent(encodedURI);
  } catch (err) {
    return customDecodeURIComponent(encodedURI);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b2tlbiIsInNpbmdsZU1hdGNoZXIiLCJSZWdFeHAiLCJtdWx0aU1hdGNoZXIiLCJkZWNvZGVDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInNwbGl0IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImVyciIsImxlbmd0aCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjb25jYXQiLCJjYWxsIiwiZGVjb2RlIiwiaW5wdXQiLCJ0b2tlbnMiLCJtYXRjaCIsImkiLCJjdXN0b21EZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlTWFwIiwiZXhlYyIsInJlc3VsdCIsImVudHJpZXMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmNvZGVkVVJJIiwiVHlwZUVycm9yIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG52YXIgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAodG9rZW4sICdnaScpO1xudmFyIG11bHRpTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKSsnLCAnZ2knKTtcblxuZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhjb21wb25lbnRzLCBzcGxpdCkge1xuXHR0cnkge1xuXHRcdC8vIFRyeSB0byBkZWNvZGUgdGhlIGVudGlyZSBzdHJpbmcgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLEtBQUssR0FBRyxjQUFaO0FBQ0EsSUFBSUMsYUFBYSxHQUFHLElBQUlDLE1BQUosQ0FBV0YsS0FBWCxFQUFrQixJQUFsQixDQUFwQjtBQUNBLElBQUlHLFlBQVksR0FBRyxJQUFJRCxNQUFKLENBQVcsTUFBTUYsS0FBTixHQUFjLElBQXpCLEVBQStCLElBQS9CLENBQW5COztBQUVBLFNBQVNJLGdCQUFULENBQTBCQyxVQUExQixFQUFzQ0MsS0FBdEMsRUFBNkM7RUFDNUMsSUFBSTtJQUVILE9BQU9DLGtCQUFrQixDQUFDRixVQUFVLENBQUNHLElBQVgsQ0FBZ0IsRUFBaEIsQ0FBRCxDQUF6QjtFQUNBLENBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVksQ0FFYjs7RUFFRCxJQUFJSixVQUFVLENBQUNLLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7SUFDNUIsT0FBT0wsVUFBUDtFQUNBOztFQUVEQyxLQUFLLEdBQUdBLEtBQUssSUFBSSxDQUFqQjtFQUdBLElBQUlLLElBQUksR0FBR04sVUFBVSxDQUFDTyxLQUFYLENBQWlCLENBQWpCLEVBQW9CTixLQUFwQixDQUFYO0VBQ0EsSUFBSU8sS0FBSyxHQUFHUixVQUFVLENBQUNPLEtBQVgsQ0FBaUJOLEtBQWpCLENBQVo7RUFFQSxPQUFPUSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLE1BQWhCLENBQXVCQyxJQUF2QixDQUE0QixFQUE1QixFQUFnQ2IsZ0JBQWdCLENBQUNPLElBQUQsQ0FBaEQsRUFBd0RQLGdCQUFnQixDQUFDUyxLQUFELENBQXhFLENBQVA7QUFDQTs7QUFFRCxTQUFTSyxNQUFULENBQWdCQyxLQUFoQixFQUF1QjtFQUN0QixJQUFJO0lBQ0gsT0FBT1osa0JBQWtCLENBQUNZLEtBQUQsQ0FBekI7RUFDQSxDQUZELENBRUUsT0FBT1YsR0FBUCxFQUFZO0lBQ2IsSUFBSVcsTUFBTSxHQUFHRCxLQUFLLENBQUNFLEtBQU4sQ0FBWXBCLGFBQVosQ0FBYjs7SUFFQSxLQUFLLElBQUlxQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixNQUFNLENBQUNWLE1BQTNCLEVBQW1DWSxDQUFDLEVBQXBDLEVBQXdDO01BQ3ZDSCxLQUFLLEdBQUdmLGdCQUFnQixDQUFDZ0IsTUFBRCxFQUFTRSxDQUFULENBQWhCLENBQTRCZCxJQUE1QixDQUFpQyxFQUFqQyxDQUFSO01BRUFZLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxLQUFOLENBQVlwQixhQUFaLENBQVQ7SUFDQTs7SUFFRCxPQUFPa0IsS0FBUDtFQUNBO0FBQ0Q7O0FBRUQsU0FBU0ksd0JBQVQsQ0FBa0NKLEtBQWxDLEVBQXlDO0VBRXhDLElBQUlLLFVBQVUsR0FBRztJQUNoQixVQUFVLGNBRE07SUFFaEIsVUFBVTtFQUZNLENBQWpCO0VBS0EsSUFBSUgsS0FBSyxHQUFHbEIsWUFBWSxDQUFDc0IsSUFBYixDQUFrQk4sS0FBbEIsQ0FBWjs7RUFDQSxPQUFPRSxLQUFQLEVBQWM7SUFDYixJQUFJO01BRUhHLFVBQVUsQ0FBQ0gsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFWLEdBQXVCZCxrQkFBa0IsQ0FBQ2MsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUF6QztJQUNBLENBSEQsQ0FHRSxPQUFPWixHQUFQLEVBQVk7TUFDYixJQUFJaUIsTUFBTSxHQUFHUixNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FBbkI7O01BRUEsSUFBSUssTUFBTSxLQUFLTCxLQUFLLENBQUMsQ0FBRCxDQUFwQixFQUF5QjtRQUN4QkcsVUFBVSxDQUFDSCxLQUFLLENBQUMsQ0FBRCxDQUFOLENBQVYsR0FBdUJLLE1BQXZCO01BQ0E7SUFDRDs7SUFFREwsS0FBSyxHQUFHbEIsWUFBWSxDQUFDc0IsSUFBYixDQUFrQk4sS0FBbEIsQ0FBUjtFQUNBOztFQUdESyxVQUFVLENBQUMsS0FBRCxDQUFWLEdBQW9CLFFBQXBCO0VBRUEsSUFBSUcsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsVUFBWixDQUFkOztFQUVBLEtBQUssSUFBSUYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0ssT0FBTyxDQUFDakIsTUFBNUIsRUFBb0NZLENBQUMsRUFBckMsRUFBeUM7SUFFeEMsSUFBSVEsR0FBRyxHQUFHSCxPQUFPLENBQUNMLENBQUQsQ0FBakI7SUFDQUgsS0FBSyxHQUFHQSxLQUFLLENBQUNZLE9BQU4sQ0FBYyxJQUFJN0IsTUFBSixDQUFXNEIsR0FBWCxFQUFnQixHQUFoQixDQUFkLEVBQW9DTixVQUFVLENBQUNNLEdBQUQsQ0FBOUMsQ0FBUjtFQUNBOztFQUVELE9BQU9YLEtBQVA7QUFDQTs7QUFFRGEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLFVBQVYsRUFBc0I7RUFDdEMsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0lBQ25DLE1BQU0sSUFBSUMsU0FBSixDQUFjLHdEQUF3RCxPQUFPRCxVQUEvRCxHQUE0RSxHQUExRixDQUFOO0VBQ0E7O0VBRUQsSUFBSTtJQUNIQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0gsT0FBWCxDQUFtQixLQUFuQixFQUEwQixHQUExQixDQUFiO0lBR0EsT0FBT3hCLGtCQUFrQixDQUFDMkIsVUFBRCxDQUF6QjtFQUNBLENBTEQsQ0FLRSxPQUFPekIsR0FBUCxFQUFZO0lBRWIsT0FBT2Msd0JBQXdCLENBQUNXLFVBQUQsQ0FBL0I7RUFDQTtBQUNELENBZEQifQ==