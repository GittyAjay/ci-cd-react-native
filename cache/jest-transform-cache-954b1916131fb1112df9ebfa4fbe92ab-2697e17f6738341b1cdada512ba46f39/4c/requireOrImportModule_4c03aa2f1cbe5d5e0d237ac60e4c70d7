f63f674efdb69f05f737f04307e430f8
'use strict';

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault3(require("@babel/runtime/helpers/asyncToGenerator"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = requireOrImportModule;

function _path() {
  var data = require('path');

  _path = function _path() {
    return data;
  };

  return data;
}

function _url() {
  var data = require('url');

  _url = function _url() {
    return data;
  };

  return data;
}

var _interopRequireDefault = _interopRequireDefault2(require('./interopRequireDefault'));

function _interopRequireDefault2(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function requireOrImportModule(_x) {
  return _requireOrImportModule.apply(this, arguments);
}

function _requireOrImportModule() {
  _requireOrImportModule = (0, _asyncToGenerator2.default)(function* (filePath) {
    var applyInteropRequireDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (!(0, _path().isAbsolute)(filePath) && filePath[0] === '.') {
      throw new Error("Jest: requireOrImportModule path must be absolute, was \"" + filePath + "\"");
    }

    try {
      var requiredModule = require(filePath);

      if (!applyInteropRequireDefault) {
        return requiredModule;
      }

      return (0, _interopRequireDefault.default)(requiredModule).default;
    } catch (error) {
      if (error.code === 'ERR_REQUIRE_ESM') {
        try {
          var moduleUrl = (0, _url().pathToFileURL)(filePath);
          var importedModule = yield import(moduleUrl.href);

          if (!applyInteropRequireDefault) {
            return importedModule;
          }

          if (!importedModule.default) {
            throw new Error("Jest: Failed to load ESM at " + filePath + " - did you use a default export?");
          }

          return importedModule.default;
        } catch (innerError) {
          if (innerError.message === 'Not supported') {
            throw new Error("Jest: Your version of Node does not support dynamic import - please enable it or use a .cjs file extension for file " + filePath);
          }

          throw innerError;
        }
      } else {
        throw error;
      }
    }
  });
  return _requireOrImportModule.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJyZXF1aXJlT3JJbXBvcnRNb2R1bGUiLCJfcGF0aCIsImRhdGEiLCJyZXF1aXJlIiwiX3VybCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJmaWxlUGF0aCIsImFwcGx5SW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiaXNBYnNvbHV0ZSIsIkVycm9yIiwicmVxdWlyZWRNb2R1bGUiLCJlcnJvciIsImNvZGUiLCJtb2R1bGVVcmwiLCJwYXRoVG9GaWxlVVJMIiwiaW1wb3J0ZWRNb2R1bGUiLCJocmVmIiwiaW5uZXJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyJyZXF1aXJlT3JJbXBvcnRNb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVpcmVPckltcG9ydE1vZHVsZTtcblxuZnVuY3Rpb24gX3BhdGgoKSB7XG4gIGNvbnN0IGRhdGEgPSByZXF1aXJlKCdwYXRoJyk7XG5cbiAgX3BhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF91cmwoKSB7XG4gIGNvbnN0IGRhdGEgPSByZXF1aXJlKCd1cmwnKTtcblxuICBfdXJsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKFxuICByZXF1aXJlKCcuL2ludGVyb3BSZXF1aXJlRGVmYXVsdCcpXG4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXF1aXJlT3JJbXBvcnRNb2R1bGUoXG4gIGZpbGVQYXRoLFxuICBhcHBseUludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHRydWVcbikge1xuICBpZiAoISgwLCBfcGF0aCgpLmlzQWJzb2x1dGUpKGZpbGVQYXRoKSAmJiBmaWxlUGF0aFswXSA9PT0gJy4nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEplc3Q6IHJlcXVpcmVPckltcG9ydE1vZHVsZSBwYXRoIG11c3QgYmUgYWJzb2x1dGUsIHdhcyBcIiR7ZmlsZVBhdGh9XCJgXG4gICAgKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVxdWlyZWRNb2R1bGUgPSByZXF1aXJlKGZpbGVQYXRoKTtcblxuICAgIGlmICghYXBwbHlJbnRlcm9wUmVxdWlyZURlZmF1bHQpIHtcbiAgICAgIHJldHVybiByZXF1aXJlZE1vZHVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQuZGVmYXVsdCkocmVxdWlyZWRNb2R1bGUpLmRlZmF1bHQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFUlJfUkVRVUlSRV9FU00nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtb2R1bGVVcmwgPSAoMCwgX3VybCgpLnBhdGhUb0ZpbGVVUkwpKGZpbGVQYXRoKTsgLy8gbm9kZSBgaW1wb3J0KClgIHN1cHBvcnRzIFVSTCwgYnV0IFR5cGVTY3JpcHQgZG9lc24ndCBrbm93IHRoYXRcblxuICAgICAgICBjb25zdCBpbXBvcnRlZE1vZHVsZSA9IGF3YWl0IGltcG9ydChtb2R1bGVVcmwuaHJlZik7XG5cbiAgICAgICAgaWYgKCFhcHBseUludGVyb3BSZXF1aXJlRGVmYXVsdCkge1xuICAgICAgICAgIHJldHVybiBpbXBvcnRlZE1vZHVsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW1wb3J0ZWRNb2R1bGUuZGVmYXVsdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBKZXN0OiBGYWlsZWQgdG8gbG9hZCBFU00gYXQgJHtmaWxlUGF0aH0gLSBkaWQgeW91IHVzZSBhIGRlZmF1bHQgZXhwb3J0P2BcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGltcG9ydGVkTW9kdWxlLmRlZmF1bHQ7XG4gICAgICB9IGNhdGNoIChpbm5lckVycm9yKSB7XG4gICAgICAgIGlmIChpbm5lckVycm9yLm1lc3NhZ2UgPT09ICdOb3Qgc3VwcG9ydGVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBKZXN0OiBZb3VyIHZlcnNpb24gb2YgTm9kZSBkb2VzIG5vdCBzdXBwb3J0IGR5bmFtaWMgaW1wb3J0IC0gcGxlYXNlIGVuYWJsZSBpdCBvciB1c2UgYSAuY2pzIGZpbGUgZXh0ZW5zaW9uIGZvciBmaWxlICR7ZmlsZVBhdGh9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBpbm5lckVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVB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