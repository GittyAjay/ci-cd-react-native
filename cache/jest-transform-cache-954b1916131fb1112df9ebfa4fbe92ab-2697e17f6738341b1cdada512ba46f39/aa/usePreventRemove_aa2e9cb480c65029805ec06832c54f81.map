{"version":3,"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQe,SAASA,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;EACA,sBAAaC,KAAK,CAACC,QAAND,CAAe;IAAA,OAAM,wBAAN;EAAA,CAAfA,CAAb;EAAA;EAAA,IAAOE,EAAP;;EAEA,IAAMC,UAAU,GAAG,6BAAnB;;EACA,WAA0B,wBAA1B;EAAA,IAAaC,QAAb,QAAQC,GAAR;;EAEA,YAA6B,uCAA7B;EAAA,IAAQC,gBAAR,SAAQA,gBAAR;;EAEAN,KAAK,CAACO,SAANP,CAAgB,YAAM;IACpBM,gBAAgB,CAACJ,EAAD,EAAKE,QAAL,EAAeN,aAAf,CAAhBQ;IACA,OAAO,YAAM;MACXA,gBAAgB,CAACJ,EAAD,EAAKE,QAAL,EAAe,KAAf,CAAhBE;IADF;EAFF,GAKG,CAACA,gBAAD,EAAmBJ,EAAnB,EAAuBE,QAAvB,EAAiCN,aAAjC,CALHE;EAOA,IAAMQ,oBAAoB,GAAG,gCAE1BC,WAAD,EAAO;IACP,IAAI,CAACX,aAAL,EAAoB;MAClB;IACD;;IAEDW,CAAC,CAACC,cAAFD;IAEAV,QAAQ,CAAC;MAAEY,IAAI,EAAEF,CAAC,CAACE;IAAV,CAAD,CAARZ;EAT2B,EAA7B;EAYAC,KAAK,CAACO,SAANP,CACE;IAAA,OAAMG,UAAN,SAAMA,cAAN,WAAMA,GAAN,MAAMA,aAAU,CAAES,WAAZT,CAAwB,cAAxBA,EAAwCK,oBAAxCL,CAAN;EAAA,CADFH,EAEE,CAACG,UAAD,EAAaK,oBAAb,CAFFR;AAID","names":["usePreventRemove","preventRemove","callback","React","useState","id","navigation","routeKey","key","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"sources":["usePreventRemove.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]}