2aa569d146f79792a767673a7f5b9099
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _excluded = ["children"],
    _excluded2 = ["enabled", "freezeOnBlur"],
    _excluded3 = ["active", "activityState", "children", "isNativeStack", "gestureResponseDistance"],
    _excluded4 = ["active", "activityState", "style", "onComponentRef"],
    _excluded5 = ["enabled", "hasTwoStates"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactFreeze = require("react-freeze");

var _package = require("react-native/package.json");

var _TransitionProgressContext = _interopRequireDefault(require("./TransitionProgressContext"));

var _useTransitionProgress = _interopRequireDefault(require("./useTransitionProgress"));

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var isPlatformSupported = _reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'windows';
var ENABLE_SCREENS = isPlatformSupported;

function enableScreens() {
  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;

  if (ENABLE_SCREENS && !_reactNative.UIManager.getViewManagerConfig('RNSScreen')) {
    console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
  }
}

var ENABLE_FREEZE = false;

function enableFreeze() {
  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var minor = parseInt(_package.version.split('.')[1]);

  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {
    console.warn('react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.');
  }

  ENABLE_FREEZE = shouldEnableReactFreeze;
}

var shouldUseActivityState = true;

function screensEnabled() {
  return ENABLE_SCREENS;
}

var NativeScreenValue;
var NativeScreenContainerValue;
var NativeScreenNavigationContainerValue;
var NativeScreenStack;
var NativeScreenStackHeaderConfig;
var NativeScreenStackHeaderSubview;
var AnimatedNativeScreen;
var NativeSearchBar;
var NativeFullWindowOverlay;
var ScreensNativeModules = {
  get NativeScreen() {
    NativeScreenValue = NativeScreenValue || (0, _reactNative.requireNativeComponent)('RNSScreen');
    return NativeScreenValue;
  },

  get NativeScreenContainer() {
    NativeScreenContainerValue = NativeScreenContainerValue || (0, _reactNative.requireNativeComponent)('RNSScreenContainer');
    return NativeScreenContainerValue;
  },

  get NativeScreenNavigationContainer() {
    NativeScreenNavigationContainerValue = NativeScreenNavigationContainerValue || (_reactNative.Platform.OS === 'ios' ? (0, _reactNative.requireNativeComponent)('RNSScreenNavigationContainer') : this.NativeScreenContainer);
    return NativeScreenNavigationContainerValue;
  },

  get NativeScreenStack() {
    NativeScreenStack = NativeScreenStack || (0, _reactNative.requireNativeComponent)('RNSScreenStack');
    return NativeScreenStack;
  },

  get NativeScreenStackHeaderConfig() {
    NativeScreenStackHeaderConfig = NativeScreenStackHeaderConfig || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderConfig');
    return NativeScreenStackHeaderConfig;
  },

  get NativeScreenStackHeaderSubview() {
    NativeScreenStackHeaderSubview = NativeScreenStackHeaderSubview || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderSubview');
    return NativeScreenStackHeaderSubview;
  },

  get NativeSearchBar() {
    NativeSearchBar = NativeSearchBar || (0, _reactNative.requireNativeComponent)('RNSSearchBar');
    return NativeSearchBar;
  },

  get NativeFullWindowOverlay() {
    NativeFullWindowOverlay = NativeFullWindowOverlay || (0, _reactNative.requireNativeComponent)('RNSFullWindowOverlay');
    return NativeFullWindowOverlay;
  }

};

function DelayedFreeze(_ref) {
  var freeze = _ref.freeze,
      children = _ref.children;

  var _react$default$useSta = _react.default.useState(false),
      _react$default$useSta2 = (0, _slicedToArray2.default)(_react$default$useSta, 2),
      freezeState = _react$default$useSta2[0],
      setFreezeState = _react$default$useSta2[1];

  if (freeze !== freezeState) {
    setImmediate(function () {
      setFreezeState(freeze);
    });
  }

  return _react.default.createElement(_reactFreeze.Freeze, {
    freeze: freeze ? freezeState : false
  }, children);
}

function ScreenStack(props) {
  var children = props.children,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);

  var size = _react.default.Children.count(children);

  var childrenWithFreeze = _react.default.Children.map(children, function (child, index) {
    var _props$descriptor, _props$descriptors, _descriptor$options$f, _descriptor$options;

    var props = child.props,
        key = child.key;
    var descriptor = (_props$descriptor = props === null || props === void 0 ? void 0 : props.descriptor) !== null && _props$descriptor !== void 0 ? _props$descriptor : props === null || props === void 0 ? void 0 : (_props$descriptors = props.descriptors) === null || _props$descriptors === void 0 ? void 0 : _props$descriptors[key];
    var freezeEnabled = (_descriptor$options$f = descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options = descriptor.options) === null || _descriptor$options === void 0 ? void 0 : _descriptor$options.freezeOnBlur) !== null && _descriptor$options$f !== void 0 ? _descriptor$options$f : ENABLE_FREEZE;
    return _react.default.createElement(DelayedFreeze, {
      freeze: freezeEnabled && size - index > 1
    }, child);
  });

  return _react.default.createElement(ScreensNativeModules.NativeScreenStack, rest, childrenWithFreeze);
}

var InnerScreen = function (_react$default$Compon) {
  (0, _inherits2.default)(InnerScreen, _react$default$Compon);

  var _super = _createSuper(InnerScreen);

  function InnerScreen() {
    var _this;

    (0, _classCallCheck2.default)(this, InnerScreen);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "ref", null);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "closing", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "progress", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "goingForward", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "setRef", function (ref) {
      var _this$props$onCompone, _this$props;

      _this.ref = ref;
      (_this$props$onCompone = (_this$props = _this.props).onComponentRef) === null || _this$props$onCompone === void 0 ? void 0 : _this$props$onCompone.call(_this$props, ref);
    });

    return _this;
  }

  (0, _createClass2.default)(InnerScreen, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$ref;

      (_this$ref = this.ref) === null || _this$ref === void 0 ? void 0 : _this$ref.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          _this$props2$enabled = _this$props2.enabled,
          enabled = _this$props2$enabled === void 0 ? ENABLE_SCREENS : _this$props2$enabled,
          _this$props2$freezeOn = _this$props2.freezeOnBlur,
          freezeOnBlur = _this$props2$freezeOn === void 0 ? ENABLE_FREEZE : _this$props2$freezeOn,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);

      if (enabled && isPlatformSupported) {
        var _gestureResponseDista, _gestureResponseDista2, _gestureResponseDista3, _gestureResponseDista4;

        AnimatedNativeScreen = AnimatedNativeScreen || _reactNative.Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);
        var active = rest.active,
            activityState = rest.activityState,
            children = rest.children,
            isNativeStack = rest.isNativeStack,
            gestureResponseDistance = rest.gestureResponseDistance,
            props = (0, _objectWithoutProperties2.default)(rest, _excluded3);

        if (active !== undefined && activityState === undefined) {
          console.warn('It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens');
          activityState = active !== 0 ? 2 : 0;
        }

        var handleRef = function handleRef(ref) {
          var _ref$viewConfig, _ref$viewConfig$valid;

          if (ref !== null && ref !== void 0 && (_ref$viewConfig = ref.viewConfig) !== null && _ref$viewConfig !== void 0 && (_ref$viewConfig$valid = _ref$viewConfig.validAttributes) !== null && _ref$viewConfig$valid !== void 0 && _ref$viewConfig$valid.style) {
            ref.viewConfig.validAttributes.style = Object.assign({}, ref.viewConfig.validAttributes.style, {
              display: false
            });

            _this2.setRef(ref);
          }
        };

        return _react.default.createElement(DelayedFreeze, {
          freeze: freezeOnBlur && activityState === 0
        }, _react.default.createElement(AnimatedNativeScreen, _extends({}, props, {
          activityState: activityState,
          gestureResponseDistance: {
            start: (_gestureResponseDista = gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.start) !== null && _gestureResponseDista !== void 0 ? _gestureResponseDista : -1,
            end: (_gestureResponseDista2 = gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.end) !== null && _gestureResponseDista2 !== void 0 ? _gestureResponseDista2 : -1,
            top: (_gestureResponseDista3 = gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.top) !== null && _gestureResponseDista3 !== void 0 ? _gestureResponseDista3 : -1,
            bottom: (_gestureResponseDista4 = gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.bottom) !== null && _gestureResponseDista4 !== void 0 ? _gestureResponseDista4 : -1
          },
          ref: handleRef,
          onTransitionProgress: !isNativeStack ? undefined : _reactNative.Animated.event([{
            nativeEvent: {
              progress: this.progress,
              closing: this.closing,
              goingForward: this.goingForward
            }
          }], {
            useNativeDriver: true
          })
        }), !isNativeStack ? children : _react.default.createElement(_TransitionProgressContext.default.Provider, {
          value: {
            progress: this.progress,
            closing: this.closing,
            goingForward: this.goingForward
          }
        }, children)));
      } else {
        var _active = rest.active,
            _activityState = rest.activityState,
            style = rest.style,
            onComponentRef = rest.onComponentRef,
            _props = (0, _objectWithoutProperties2.default)(rest, _excluded4);

        if (_active !== undefined && _activityState === undefined) {
          _activityState = _active !== 0 ? 2 : 0;
        }

        return _react.default.createElement(_reactNative.Animated.View, _extends({
          style: [style, {
            display: _activityState !== 0 ? 'flex' : 'none'
          }],
          ref: this.setRef
        }, _props));
      }
    }
  }]);
  return InnerScreen;
}(_react.default.Component);

function ScreenContainer(props) {
  var _props$enabled = props.enabled,
      enabled = _props$enabled === void 0 ? ENABLE_SCREENS : _props$enabled,
      hasTwoStates = props.hasTwoStates,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded5);

  if (enabled && isPlatformSupported) {
    if (hasTwoStates) {
      return _react.default.createElement(ScreensNativeModules.NativeScreenNavigationContainer, rest);
    }

    return _react.default.createElement(ScreensNativeModules.NativeScreenContainer, rest);
  }

  return _react.default.createElement(_reactNative.View, rest);
}

var styles = _reactNative.StyleSheet.create({
  headerSubview: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, {
    type: "back",
    style: styles.headerSubview
  }, _react.default.createElement(_reactNative.Image, _extends({
    resizeMode: "center",
    fadeDuration: 0
  }, props)));
};

var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "right",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "left",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "center",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderSearchBarView = function ScreenStackHeaderSearchBarView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "searchBar",
    style: styles.headerSubview
  }));
};

var ScreenContext = _react.default.createContext(InnerScreen);

var Screen = function (_react$default$Compon2) {
  (0, _inherits2.default)(Screen, _react$default$Compon2);

  var _super2 = _createSuper(Screen);

  function Screen() {
    (0, _classCallCheck2.default)(this, Screen);
    return _super2.apply(this, arguments);
  }

  (0, _createClass2.default)(Screen, [{
    key: "render",
    value: function render() {
      var ScreenWrapper = this.context || InnerScreen;
      return _react.default.createElement(ScreenWrapper, this.props);
    }
  }]);
  return Screen;
}(_react.default.Component);

_defineProperty(Screen, "contextType", ScreenContext);

module.exports = {
  Screen: Screen,
  ScreenContainer: ScreenContainer,
  ScreenContext: ScreenContext,
  ScreenStack: ScreenStack,
  InnerScreen: InnerScreen,

  get NativeScreen() {
    return ScreensNativeModules.NativeScreen;
  },

  get NativeScreenContainer() {
    return ScreensNativeModules.NativeScreenContainer;
  },

  get NativeScreenNavigationContainer() {
    return ScreensNativeModules.NativeScreenNavigationContainer;
  },

  get ScreenStackHeaderConfig() {
    return ScreensNativeModules.NativeScreenStackHeaderConfig;
  },

  get ScreenStackHeaderSubview() {
    return ScreensNativeModules.NativeScreenStackHeaderSubview;
  },

  get SearchBar() {
    if (!_utils.isSearchBarAvailableForCurrentPlatform) {
      console.warn('Importing SearchBar is only valid on iOS and Android devices.');
      return _reactNative.View;
    }

    return ScreensNativeModules.NativeSearchBar;
  },

  get FullWindowOverlay() {
    if (_reactNative.Platform.OS !== 'ios') {
      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');
      return _reactNative.View;
    }

    return ScreensNativeModules.NativeFullWindowOverlay;
  },

  ScreenStackHeaderBackButtonImage: ScreenStackHeaderBackButtonImage,
  ScreenStackHeaderRightView: ScreenStackHeaderRightView,
  ScreenStackHeaderLeftView: ScreenStackHeaderLeftView,
  ScreenStackHeaderCenterView: ScreenStackHeaderCenterView,
  ScreenStackHeaderSearchBarView: ScreenStackHeaderSearchBarView,
  enableScreens: enableScreens,
  enableFreeze: enableFreeze,
  screensEnabled: screensEnabled,
  shouldUseActivityState: shouldUseActivityState,
  useTransitionProgress: _useTransitionProgress.default,
  isSearchBarAvailableForCurrentPlatform: _utils.isSearchBarAvailableForCurrentPlatform,
  executeNativeBackPress: _utils.executeNativeBackPress
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,