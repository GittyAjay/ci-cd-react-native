{"version":3,"mappings":"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","names":["isPlatformSupported","Platform","OS","ENABLE_SCREENS","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","console","error","ENABLE_FREEZE","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","warn","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","NativeScreenContainer","NativeScreenNavigationContainer","DelayedFreeze","freeze","children","React","useState","freezeState","setFreezeState","setImmediate","_react","_reactFreeze","ScreenStack","props","rest","size","Children","count","childrenWithFreeze","map","child","index","key","descriptor","descriptors","_props$descriptors","freezeEnabled","options","_descriptor$options","freezeOnBlur","InnerScreen","args","_defineProperty","Animated","Value","ref","onComponentRef","setNativeProps","render","enabled","createAnimatedComponent","active","activityState","isNativeStack","gestureResponseDistance","undefined","handleRef","viewConfig","_ref$viewConfig","validAttributes","_ref$viewConfig$valid","style","display","setRef","start","end","top","bottom","onTransitionProgress","event","nativeEvent","progress","closing","goingForward","useNativeDriver","_TransitionProgressContext","Provider","value","_reactNative","View","Component","ScreenContainer","hasTwoStates","styles","StyleSheet","create","headerSubview","position","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","type","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenContext","createContext","Screen","ScreenWrapper","context","module","exports","ScreenStackHeaderConfig","ScreenStackHeaderSubview","SearchBar","isSearchBarAvailableForCurrentPlatform","FullWindowOverlay","useTransitionProgress","executeNativeBackPress"],"sources":["index.native.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  const { children, ...rest } = props;\n  const size = React.Children.count(children);\n  // freezes all screens except the top one\n  const childrenWithFreeze = React.Children.map(children, (child, index) => {\n    // @ts-expect-error it's either SceneView in v6 or RouteView in v5\n    const { props, key } = child;\n    const descriptor = props?.descriptor ?? props?.descriptors?.[key];\n    const freezeEnabled = descriptor?.options?.freezeOnBlur ?? ENABLE_FREEZE;\n\n    return (\n      <DelayedFreeze freeze={freezeEnabled && size - index > 1}>\n        {child}\n      </DelayedFreeze>\n    );\n  });\n\n  return (\n    <ScreensNativeModules.NativeScreenStack {...rest}>\n      {childrenWithFreeze}\n    </ScreensNativeModules.NativeScreenStack>\n  );\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass InnerScreen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const {\n      enabled = ENABLE_SCREENS,\n      freezeOnBlur = ENABLE_FREEZE,\n      ...rest\n    } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        gestureResponseDistance,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const handleRef = (ref: ViewConfig) => {\n        if (ref?.viewConfig?.validAttributes?.style) {\n          ref.viewConfig.validAttributes.style = {\n            ...ref.viewConfig.validAttributes.style,\n            display: false,\n          };\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <DelayedFreeze freeze={freezeOnBlur && activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            activityState={activityState}\n            gestureResponseDistance={{\n              start: gestureResponseDistance?.start ?? -1,\n              end: gestureResponseDistance?.end ?? -1,\n              top: gestureResponseDistance?.top ?? -1,\n              bottom: gestureResponseDistance?.bottom ?? -1,\n            }}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </DelayedFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `useReanimatedTransitionProgress` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(InnerScreen);\n\nclass Screen extends React.Component<ScreenProps> {\n  static contextType = ScreenContext;\n\n  render() {\n    const ScreenWrapper = this.context || InnerScreen;\n    return <ScreenWrapper {...this.props} />;\n  }\n}\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n  InnerScreen,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n"]}