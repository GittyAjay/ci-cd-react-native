7aef1f17f12556539eac9944d2f164b0
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = installCommonGlobals;

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

var _createProcessObject = _interopRequireDefault(require('./createProcessObject'));

var _deepCyclicCopy = _interopRequireDefault(require('./deepCyclicCopy'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var DTRACE = Object.keys(globalThis).filter(function (key) {
  return key.startsWith('DTRACE');
});

function installCommonGlobals(globalObject, globals) {
  var _Object$definePropert;

  globalObject.process = (0, _createProcessObject.default)();
  var symbol = globalObject.Symbol;
  Object.defineProperties(globalObject, (_Object$definePropert = {}, (0, _defineProperty2.default)(_Object$definePropert, symbol.for('jest-native-promise'), {
    enumerable: false,
    value: Promise,
    writable: false
  }), (0, _defineProperty2.default)(_Object$definePropert, symbol.for('jest-native-now'), {
    enumerable: false,
    value: globalObject.Date.now.bind(globalObject.Date),
    writable: false
  }), (0, _defineProperty2.default)(_Object$definePropert, symbol.for('jest-native-read-file'), {
    enumerable: false,
    value: fs().readFileSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2.default)(_Object$definePropert, symbol.for('jest-native-write-file'), {
    enumerable: false,
    value: fs().writeFileSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2.default)(_Object$definePropert, symbol.for('jest-native-exists-file'), {
    enumerable: false,
    value: fs().existsSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2.default)(_Object$definePropert, 'jest-symbol-do-not-touch', {
    enumerable: false,
    value: symbol,
    writable: false
  }), _Object$definePropert));
  DTRACE.forEach(function (dtrace) {
    globalObject[dtrace] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return globalThis[dtrace].apply(this, args);
    };
  });
  return Object.assign(globalObject, (0, _deepCyclicCopy.default)(globals));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,