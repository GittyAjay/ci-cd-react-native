49f12a6cb1401f26cee10033b15bcb43
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(require("react"));

var useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;

function useLatestCallback(callback) {
  var ref = React.useRef(callback);
  var latestCallback = React.useRef(function latestCallback() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return ref.current.apply(this, args);
  }).current;
  useIsomorphicLayoutEffect(function () {
    ref.current = callback;
  });
  return latestCallback;
}

exports.default = useLatestCallback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9fZXNNb2R1bGUiLCJyZXN1bHQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJleHBvcnRzIiwiUmVhY3QiLCJyZXF1aXJlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImRvY3VtZW50IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0IiwidXNlTGF0ZXN0Q2FsbGJhY2siLCJjYWxsYmFjayIsInJlZiIsInVzZVJlZiIsImxhdGVzdENhbGxiYWNrIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY3VycmVudCIsImFwcGx5IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogUmVhY3QgaG9vayB3aGljaCByZXR1cm5zIHRoZSBsYXRlc3QgY2FsbGJhY2sgd2l0aG91dCBjaGFuZ2luZyB0aGUgcmVmZXJlbmNlLlxuICovXG5mdW5jdGlvbiB1c2VMYXRlc3RDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciByZWYgPSBSZWFjdC51c2VSZWYoY2FsbGJhY2spO1xuICAgIHZhciBsYXRlc3RDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihmdW5jdGlvbiBsYXRlc3RDYWxsYmFjaygpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYmFiZWwvbm8taW52YWxpZC10aGlzXG4gICAgICAgIHJldHVybiByZWYuY3VycmVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9KS5jdXJyZW50O1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIH0pO1xuICAgIHJldHVybiBsYXRlc3RDYWxsYmFjaztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVzZUxhdGVzdENhbGxiYWNrO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlLEdBQUksUUFBUSxLQUFLQSxlQUFkLEtBQW1DQyxNQUFNLENBQUNDLE1BQVAsR0FBaUIsVUFBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWVDLENBQWYsRUFBa0JDLEVBQWxCLEVBQXNCO0VBQzVGLElBQUlBLEVBQUUsS0FBS0MsU0FBWCxFQUFzQkQsRUFBRSxHQUFHRCxDQUFMO0VBQ3RCSixNQUFNLENBQUNPLGNBQVAsQ0FBc0JMLENBQXRCLEVBQXlCRyxFQUF6QixFQUE2QjtJQUFFRyxVQUFVLEVBQUUsSUFBZDtJQUFvQkMsR0FBRyxFQUFFLGVBQVc7TUFBRSxPQUFPTixDQUFDLENBQUNDLENBQUQsQ0FBUjtJQUFjO0VBQXBELENBQTdCO0FBQ0gsQ0FId0QsR0FHbkQsVUFBU0YsQ0FBVCxFQUFZQyxDQUFaLEVBQWVDLENBQWYsRUFBa0JDLEVBQWxCLEVBQXNCO0VBQ3hCLElBQUlBLEVBQUUsS0FBS0MsU0FB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