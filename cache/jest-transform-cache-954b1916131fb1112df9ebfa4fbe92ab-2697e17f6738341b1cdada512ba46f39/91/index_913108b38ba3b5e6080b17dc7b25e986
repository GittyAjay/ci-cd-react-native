5892b1a7276bb3dc59fbfff9600c69cc
'use strict';

var vendors = require('./vendors.json');

var env = process.env;
Object.defineProperty(exports, '_vendors', {
  value: vendors.map(function (v) {
    return v.constant;
  })
});
exports.name = null;
exports.isPR = null;
vendors.forEach(function (vendor) {
  var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
  var isCI = envs.every(function (obj) {
    return checkEnv(obj);
  });
  exports[vendor.constant] = isCI;

  if (isCI) {
    exports.name = vendor.name;

    switch (typeof vendor.pr) {
      case 'string':
        exports.isPR = !!env[vendor.pr];
        break;

      case 'object':
        if ('env' in vendor.pr) {
          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
        } else if ('any' in vendor.pr) {
          exports.isPR = vendor.pr.any.some(function (key) {
            return !!env[key];
          });
        } else {
          exports.isPR = checkEnv(vendor.pr);
        }

        break;

      default:
        exports.isPR = null;
    }
  }
});
exports.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports.name || false);

function checkEnv(obj) {
  if (typeof obj === 'string') return !!env[obj];
  return Object.keys(obj).every(function (k) {
    return env[k] === obj[k];
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZW5kb3JzIiwicmVxdWlyZSIsImVudiIsInByb2Nlc3MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1hcCIsInYiLCJjb25zdGFudCIsIm5hbWUiLCJpc1BSIiwiZm9yRWFjaCIsInZlbmRvciIsImVudnMiLCJBcnJheSIsImlzQXJyYXkiLCJpc0NJIiwiZXZlcnkiLCJvYmoiLCJjaGVja0VudiIsInByIiwibmUiLCJhbnkiLCJzb21lIiwia2V5IiwiQ0kiLCJDT05USU5VT1VTX0lOVEVHUkFUSU9OIiwiQlVJTERfTlVNQkVSIiwiUlVOX0lEIiwia2V5cyIsImsiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdmVuZG9ycyA9IHJlcXVpcmUoJy4vdmVuZG9ycy5qc29uJylcblxuY29uc3QgZW52ID0gcHJvY2Vzcy5lbnZcblxuLy8gVXNlZCBmb3IgdGVzdGluZyBvbmx5XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ192ZW5kb3JzJywge1xuICB2YWx1ZTogdmVuZG9ycy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdi5jb25zdGFudFxuICB9KVxufSlcblxuZXhwb3J0cy5uYW1lID0gbnVsbFxuZXhwb3J0cy5pc1BSID0gbnVsbFxuXG52ZW5kb3JzLmZvckVhY2goZnVuY3Rpb24gKHZlbmRvcikge1xuICBjb25zdCBlbnZzID0gQXJyYXkuaXNBcnJheSh2ZW5kb3IuZW52KSA/IHZlbmRvci5lbnYgOiBbdmVuZG9yLmVudl1cbiAgY29uc3QgaXNDSSA9IGVudnMuZXZlcnkoZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBjaGVja0VudihvYmopXG4gIH0pXG5cbiAgZXhwb3J0c1t2ZW5kb3IuY29uc3RhbnRdID0gaXNDSVxuXG4gIGlmIChpc0NJKSB7XG4gICAgZXhwb3J0cy5uYW1lID0gdmVuZG9yLm5hbWVcblxuICAgIHN3aXRjaCAodHlwZW9mIHZlbmRvci5wcikge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgLy8gXCJwclwiOiBcIkNJUlJVU19QUlwiXG4gICAgICAgIGV4cG9ydHMuaXNQUiA9ICEhZW52W3ZlbmRvci5wcl1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmICgnZW52JyBpbiB2ZW5kb3IucHIpIHtcbiAgICAgICAgICAvLyBcInByXCI6IHsgXCJlbnZcIjogXCJCVUlMREtJVEVfUFVMTF9SRVFVRVNUXCIsIFwibmVcIjogXCJmYWxzZVwiIH1cbiAgICAgICAgICBleHBvcnRzLmlzUFIgPSB2ZW5kb3IucHIuZW52IGluIGVudiAmJiBlbnZbdmVuZG9yLnByLmVudl0gIT09IHZlbmRvci5wci5uZVxuICAgICAgICB9IGVsc2UgaWYgKCdhbnknIGluIHZlbmRvci5wcikge1xuICAgICAgICAgIC8vIFwicHJcIjogeyBcImFueVwiOiBbXCJnaHByYlB1bGxJZFwiLCBcIkNIQU5HRV9JRFwiXSB9XG4gICAgICAgICAgZXhwb3J0cy5pc1BSID0gdmVuZG9yLnByLmFueS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWVudltrZXldXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBcInByXCI6IHsgXCJEUk9ORV9CVUlMRF9FVkVOVFwiOiBcInB1bGxfcmVxdWVzdFwiIH1cbiAgICAgICAgICBleHBvcnRzLmlzUFIgPSBjaGVja0Vudih2ZW5kb3IucHIpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIFBSIGRldGVjdGlvbiBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIHZlbmRvclxuICAgICAgICBleHBvcnRzLmlzUFIgPSBudWxsXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnRzLmlzQ0kgPSAhIShcbiAgZW52LkNJIHx8IC8vIFRyYXZpcyBDSSwgQ2lyY2xlQ0ksIENpcnJ1cyBDSSwgR2l0bGFiIENJLCBBcHB2ZXlvciwgQ29kZVNoaXAsIGRzYXJpXG4gIGVudi5DT05USU5VT1VTX0lOVEVHUkFUSU9OIHx8IC8vIFRyYXZpcyBDSSwgQ2lycnVzIENJXG4gIGVudi5CVUlMRF9OVU1CRVIgfHwgLy8gSmVua2lucywgVGVhbUNpdHlcbiAgZW52LlJVTl9JRCB8fCAvLyBUYXNrQ2x1c3RlciwgZHNhcmlcbiAgZXhwb3J0cy5uYW1lIHx8XG4gIGZhbHNlXG4pXG5cbmZ1bmN0aW9uIGNoZWNrRW52IChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSByZXR1cm4gISFlbnZbb2JqXVxuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5ldmVyeShmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBlbnZba10gPT09IG9ialtrXVxuICB9KVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUF2Qjs7QUFFQSxJQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBcEI7QUFHQUUsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixVQUEvQixFQUEyQztFQUN6Q0MsS0FBSyxFQUFFUCxPQUFPLENBQUNRLEdBQVIsQ0FBWSxVQUFVQyxDQUFWLEVBQWE7SUFDOUIsT0FBT0EsQ0FBQyxDQUFDQyxRQUFUO0VBQ0QsQ0FGTTtBQURrQyxDQUEzQztBQU1BSixPQUFPLENBQUNLLElBQVIsR0FBZSxJQUFmO0FBQ0FMLE9BQU8sQ0FBQ00sSUFBUixHQUFlLElBQWY7QUFFQVosT0FBTyxDQUFDYSxPQUFSLENBQWdCLFVBQVVDLE1BQVYsRUFBa0I7RUFDaEMsSUFBTUMsSUFBSSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsTUFBTSxDQUFDWixHQUFyQixJQUE0QlksTUFBTSxDQUFDWixHQUFuQyxHQUF5QyxDQUFDWSxNQUFNLENBQUNaLEdBQVIsQ0FBdEQ7RUFDQSxJQUFNZ0IsSUFBSSxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxVQUFVQyxHQUFWLEVBQWU7SUFDckMsT0FBT0MsUUFBUSxDQUFDRCxHQUFELENBQWY7RUFDRCxDQUZZLENBQWI7RUFJQWQsT0FBTyxDQUFDUSxNQUFNLENBQUNKLFFBQVIsQ0FBUCxHQUEyQlEsSUFBM0I7O0VBRUEsSUFBSUEsSUFBSixFQUFVO0lBQ1JaLE9BQU8sQ0FBQ0ssSUFBUixHQUFlRyxNQUFNLENBQUNILElBQXRCOztJQUVBLFFBQVEsT0FBT0csTUFBTSxDQUFDUSxFQUF0QjtNQUNFLEtBQUssUUFBTDtRQUVFaEIsT0FBTyxDQUFDTSxJQUFSLEdBQWUsQ0FBQyxDQUFDVixHQUFHLENBQUNZLE1BQU0sQ0FBQ1EsRUFBUixDQUFwQjtRQUNBOztNQUNGLEtBQUssUUFBTDtRQUNFLElBQUksU0FBU1IsTUFBTSxDQUFDUSxFQUFwQixFQUF3QjtVQUV0QmhCLE9BQU8sQ0FBQ00sSUFBUixHQUFlRSxNQUFNLENBQUNRLEVBQVAsQ0FBVXBCLEdBQVYsSUFBaUJBLEdBQWpCLElBQXdCQSxHQUFHLENBQUNZLE1BQU0sQ0FBQ1EsRUFBUCxDQUFVcEIsR0FBWCxDQUFILEtBQXVCWSxNQUFNLENBQUNRLEVBQVAsQ0FBVUMsRUFBeEU7UUFDRCxDQUhELE1BR08sSUFBSSxTQUFTVCxNQUFNLENBQUNRLEVBQXBCLEVBQXdCO1VBRTdCaEIsT0FBTyxDQUFDTSxJQUFSLEdBQWVFLE1BQU0sQ0FBQ1EsRUFBUCxDQUFVRSxHQUFWLENBQWNDLElBQWQsQ0FBbUIsVUFBVUMsR0FBVixFQUFlO1lBQy9DLE9BQU8sQ0FBQyxDQUFDeEIsR0FBRyxDQUFDd0IsR0FBRCxDQUFaO1VBQ0QsQ0FGYyxDQUFmO1FBR0QsQ0FMTSxNQUtBO1VBRUxwQixPQUFPLENBQUNNLElBQVIsR0FBZVMsUUFBUSxDQUFDUCxNQUFNLENBQUNRLEVBQVIsQ0FBdkI7UUFDRDs7UUFDRDs7TUFDRjtRQUVFaEIsT0FBTyxDQUFDTSxJQUFSLEdBQWUsSUFBZjtJQXJCSjtFQXVCRDtBQUNGLENBbkNEO0FBcUNBTixPQUFPLENBQUNZLElBQVIsR0FBZSxDQUFDLEVBQ2RoQixHQUFHLENBQUN5QixFQUFKLElBQ0F6QixHQUFHLENBQUMwQixzQkFESixJQUVBMUIsR0FBRyxDQUFDMkIsWUFGSixJQUdBM0IsR0FBRyxDQUFDNEIsTUFISixJQUlBeEIsT0FBTyxDQUFDSyxJQUpSLElBS0EsS0FOYyxDQUFoQjs7QUFTQSxTQUFTVSxRQUFULENBQW1CRCxHQUFuQixFQUF3QjtFQUN0QixJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QixPQUFPLENBQUMsQ0FBQ2xCLEdBQUcsQ0FBQ2tCLEdBQUQsQ0FBWjtFQUM3QixPQUFPaEIsTUFBTSxDQUFDMkIsSUFBUCxDQUFZWCxHQUFaLEVBQWlCRCxLQUFqQixDQUF1QixVQUFVYSxDQUFWLEVBQWE7SUFDekMsT0FBTzlCLEdBQUcsQ0FBQzhCLENBQUQsQ0FBSCxLQUFXWixHQUFHLENBQUNZLENBQUQsQ0FBckI7RUFDRCxDQUZNLENBQVA7QUFHRCJ9